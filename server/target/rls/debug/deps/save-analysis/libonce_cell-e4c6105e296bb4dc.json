{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1","program":"/home/tommady/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","once_cell","--edition=2018","/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=e4c6105e296bb4dc","-C","extra-filename=-e4c6105e296bb4dc","--out-dir","/home/tommady/code/homepage/server/target/rls/debug/deps","-L","dependency=/home/tommady/code/homepage/server/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/tommady/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tommady/code/homepage/server/target/rls/debug/deps/libonce_cell-e4c6105e296bb4dc.rmeta"},"prelude":{"crate_id":{"name":"once_cell","disambiguator":[12928659116746412125,10614340796330292230]},"crate_root":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src","external_crates":[{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}}],"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":0,"byte_end":32784,"line_start":1,"line_end":1047,"column_start":1,"column_end":14}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":0,"byte_end":32784,"line_start":1,"line_end":1047,"column_start":1,"column_end":14},"name":"","qualname":"::","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":55},{"krate":0,"index":141}],"decl_id":null,"docs":"# Overview","sig":null,"attributes":[{"value":"*\n# Overview\n\n`once_cell` provides two new cell-like types, [`unsync::OnceCell`] and [`sync::OnceCell`]. A `OnceCell`\nmight store arbitrary non-`Copy` types, can be assigned to at most once and provides direct access\nto the stored contents. The core API looks *roughly* like this (and there's much more inside, read on!):\n\n```rust,ignore\nimpl<T> OnceCell<T> {\n    fn new() -> OnceCell<T> { ... }\n    fn set(&self, value: T) -> Result<(), T> { ... }\n    fn get(&self) -> Option<&T> { ... }\n}\n```\n\nNote that, like with [`RefCell`] and [`Mutex`], the `set` method requires only a shared reference.\nBecause of the single assignment restriction `get` can return a `&T` instead of `Ref<T>`\nor `MutexGuard<T>`.\n\nThe `sync` flavor is thread-safe (that is, implements the [`Sync`] trait), while the `unsync` one is not.\n\n[`unsync::OnceCell`]: unsync/struct.OnceCell.html\n[`sync::OnceCell`]: sync/struct.OnceCell.html\n[`RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html\n[`Mutex`]: https://doc.rust-lang.org/std/sync/struct.Mutex.html\n[`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n\n# Patterns\n\n`OnceCell` might be useful for a variety of patterns.\n\n## Safe Initialization of global data\n\n```rust\nuse std::{env, io};\n\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct Logger {\n    // ...\n}\nstatic INSTANCE: OnceCell<Logger> = OnceCell::new();\n\nimpl Logger {\n    pub fn global() -> &'static Logger {\n        INSTANCE.get().expect(\"logger is not initialized\")\n    }\n\n    fn from_cli(args: env::Args) -> Result<Logger, std::io::Error> {\n       // ...\n#      Ok(Logger {})\n    }\n}\n\nfn main() {\n    let logger = Logger::from_cli(env::args()).unwrap();\n    INSTANCE.set(logger).unwrap();\n    // use `Logger::global()` from now on\n}\n```\n\n## Lazy initialized global data\n\nThis is essentially the `lazy_static!` macro, but without a macro.\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\n\nuse once_cell::sync::OnceCell;\n\nfn global_data() -> &'static Mutex<HashMap<i32, String>> {\n    static INSTANCE: OnceCell<Mutex<HashMap<i32, String>>> = OnceCell::new();\n    INSTANCE.get_or_init(|| {\n        let mut m = HashMap::new();\n        m.insert(13, \"Spica\".to_string());\n        m.insert(74, \"Hoyten\".to_string());\n        Mutex::new(m)\n    })\n}\n```\n\nThere are also the [`sync::Lazy`] and [`unsync::Lazy`] convenience types to streamline this pattern:\n\n```rust\nuse std::{sync::Mutex, collections::HashMap};\nuse once_cell::sync::Lazy;\n\nstatic GLOBAL_DATA: Lazy<Mutex<HashMap<i32, String>>> = Lazy::new(|| {\n    let mut m = HashMap::new();\n    m.insert(13, \"Spica\".to_string());\n    m.insert(74, \"Hoyten\".to_string());\n    Mutex::new(m)\n});\n\nfn main() {\n    println!(\"{:?}\", GLOBAL_DATA.lock().unwrap());\n}\n```\n\n[`sync::Lazy`]: sync/struct.Lazy.html\n[`unsync::Lazy`]: unsync/struct.Lazy.html\n\n## General purpose lazy evaluation\n\nUnlike `lazy_static!`, `Lazy` works with local variables.\n\n```rust\nuse once_cell::unsync::Lazy;\n\nfn main() {\n    let ctx = vec![1, 2, 3];\n    let thunk = Lazy::new(|| {\n        ctx.iter().sum::<i32>()\n    });\n    assert_eq!(*thunk, 6);\n}\n```\n\nIf you need a lazy field in a struct, you probably should use `OnceCell`\ndirectly, because that will allow you to access `self` during initialization.\n\n```rust\nuse std::{fs, path::PathBuf};\n\nuse once_cell::unsync::OnceCell;\n\nstruct Ctx {\n    config_path: PathBuf,\n    config: OnceCell<String>,\n}\n\nimpl Ctx {\n    pub fn get_config(&self) -> Result<&str, std::io::Error> {\n        let cfg = self.config.get_or_try_init(|| {\n            fs::read_to_string(&self.config_path)\n        })?;\n        Ok(cfg.as_str())\n    }\n}\n```\n\n## Building block\n\nNaturally, it is  possible to build other abstractions on top of `OnceCell`.\nFor example, this is a `regex!` macro which takes a string literal and returns an\n*expression* that evaluates to a `&'static Regex`:\n\n```\nmacro_rules! regex {\n    ($re:literal $(,)?) => {{\n        static RE: once_cell::sync::OnceCell<regex::Regex> = once_cell::sync::OnceCell::new();\n        RE.get_or_init(|| regex::Regex::new($re).unwrap())\n    }};\n}\n```\n\nThis macro can be useful to avoid the \"compile regex on every loop iteration\" problem.\n\nAnother pattern would be a `LateInit` type for delayed initialization:\n\n\n```\nuse once_cell::sync::OnceCell;\n\n#[derive(Debug)]\npub struct LateInit<T> { cell: OnceCell<T> }\n\nimpl<T> LateInit<T> {\n    pub fn init(&self, value: T) {\n        assert!(self.cell.set(value).is_ok())\n    }\n}\n\nimpl<T> Default for LateInit<T> {\n    fn default() -> Self { LateInit { cell: OnceCell::default() } }\n}\n\nimpl<T> std::ops::Deref for LateInit<T> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        self.cell.get().unwrap()\n    }\n}\n\n#[derive(Default, Debug)]\nstruct A<'a> {\n    b: LateInit<&'a B<'a>>,\n}\n\n#[derive(Default, Debug)]\nstruct B<'a> {\n    a: LateInit<&'a A<'a>>\n}\n\nfn build_cycle() {\n    let a = A::default();\n    let b = B::default();\n    a.b.init(&b);\n    b.a.init(&a);\n    println!(\"{:?}\", a.b.a.b.a);\n}\n```\n\n# Comparison with std\n\n|`!Sync` types         | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`Cell<T>`             | `T`                    | requires `T: Copy` for `get`                  |\n|`RefCell<T>`          | `RefMut<T>` / `Ref<T>` | may panic at runtime                          |\n|`unsync::OnceCell<T>` | `&T`                   | assignable only once                          |\n\n|`Sync` types          | Access Mode            | Drawbacks                                     |\n|----------------------|------------------------|-----------------------------------------------|\n|`AtomicT`             | `T`                    | works only with certain `Copy` types          |\n|`Mutex<T>`            | `MutexGuard<T>`        | may deadlock at runtime, may block the thread |\n|`sync::OnceCell<T>`   | `&T`                   | assignable only once, may block the thread    |\n\nTechnically, calling `get_or_init` will also cause a panic or a deadlock if it recursively calls\nitself. However, because the assignment can happen only once, such cases should be more rare than\nequivalents with `RefCell` and `Mutex`.\n\n# Minimum Supported `rustc` Version\n\nThis crate's minimum supported `rustc` version is `1.36.0`.\n\nIf only the `std` feature is enabled, MSRV will be updated conservatively.\nWhen using other features, like `parking_lot`, MSRV might be updated more frequently, up to the latest stable.\nIn both cases, increasing MSRV is *not* considered a semver-breaking change.\n\n# Implementation details\n\nThe implementation is based on the [`lazy_static`](https://github.com/rust-lang-nursery/lazy-static.rs/)\nand [`lazy_cell`](https://github.com/indiv0/lazycell/) crates and [`std::sync::Once`]. In some sense,\n`once_cell` just streamlines and unifies those APIs.\n\nTo implement a sync flavor of `OnceCell`, this crates uses either a custom re-implementation of\n`std::sync::Once` or `parking_lot::Mutex`. This is controlled by the `parking_lot` feature, which\nis enabled by default. Performance is the same for both cases, but the `parking_lot` based `OnceCell<T>`\nis smaller by up to 16 bytes.\n\nThis crate uses `unsafe`.\n\n[`std::sync::Once`]: https://doc.rust-lang.org/std/sync/struct.Once.html\n\n# F.A.Q.\n\n**Should I use lazy_static or once_cell?**\n\nTo the first approximation, `once_cell` is both more flexible and more convenient than `lazy_static`\nand should be preferred.\n\nUnlike `once_cell`, `lazy_static` supports spinlock-based implementation of blocking which works with\n`#![no_std]`.\n\n`lazy_static` has received significantly more real world testing, but `once_cell` is also a widely\nused crate.\n\n**Should I use the sync or unsync flavor?**\n\nBecause Rust compiler checks thread safety for you, it's impossible to accidentally use `unsync` where\n`sync` is required. So, use `unsync` in single-threaded code and `sync` in multi-threaded. It's easy\nto switch between the two if code becomes multi-threaded later.\n\nAt the moment, `unsync` has an additional benefit that reentrant initialization causes a panic, which\nmight be easier to debug than a deadlock.\n\n# Related crates\n\n* [double-checked-cell](https://github.com/niklasf/double-checked-cell)\n* [lazy-init](https://crates.io/crates/lazy-init)\n* [lazycell](https://crates.io/crates/lazycell)\n* [mitochondria](https://crates.io/crates/mitochondria)\n* [lazy_static](https://crates.io/crates/lazy_static)\n\n*/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":0,"byte_end":8465,"line_start":1,"line_end":276,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":8777,"byte_end":8783,"line_start":294,"line_end":294,"column_start":9,"column_end":15},"name":"unsync","qualname":"::unsync","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":107},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":119},{"krate":0,"index":123},{"krate":0,"index":128},{"krate":0,"index":133},{"krate":0,"index":138}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":68},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9639,"byte_end":9647,"line_start":324,"line_end":324,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::unsync::OnceCell","value":"OnceCell {  }","parent":null,"children":[{"krate":0,"index":70}],"decl_id":null,"docs":" A cell which can be written to only once. It is not thread safe.","sig":null,"attributes":[{"value":"/ A cell which can be written to only once. It is not thread safe.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":8976,"byte_end":9044,"line_start":304,"line_end":304,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9049,"byte_end":9052,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ Unlike [`std::cell::RefCell`], a `OnceCell` provides simple `&`","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9057,"byte_end":9124,"line_start":306,"line_end":306,"column_start":5,"column_end":72}},{"value":"/ references to the contents.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9129,"byte_end":9160,"line_start":307,"line_end":307,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9165,"byte_end":9168,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ [`std::cell::RefCell`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9173,"byte_end":9255,"line_start":309,"line_end":309,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9260,"byte_end":9263,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9268,"byte_end":9281,"line_start":311,"line_end":311,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9286,"byte_end":9293,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9298,"byte_end":9334,"line_start":313,"line_end":313,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9339,"byte_end":9342,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9347,"byte_end":9378,"line_start":315,"line_end":315,"column_start":5,"column_end":36}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9383,"byte_end":9417,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9422,"byte_end":9425,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ let value: &String = cell.get_or_init(|| {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9430,"byte_end":9476,"line_start":318,"line_end":318,"column_start":5,"column_end":51}},{"value":"/     \"Hello, World!\".to_string()","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9481,"byte_end":9516,"line_start":319,"line_end":319,"column_start":5,"column_end":40}},{"value":"/ });","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9521,"byte_end":9528,"line_start":320,"line_end":320,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9533,"byte_end":9572,"line_start":321,"line_end":321,"column_start":5,"column_end":44}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9577,"byte_end":9611,"line_start":322,"line_end":322,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":9616,"byte_end":9623,"line_start":323,"line_end":323,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11357,"byte_end":11360,"line_start":382,"line_end":382,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"pub const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11306,"byte_end":11335,"line_start":381,"line_end":381,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11575,"byte_end":11578,"line_start":389,"line_end":389,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"pub fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a reference to the underlying value.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11453,"byte_end":11498,"line_start":386,"line_end":386,"column_start":9,"column_end":54}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11507,"byte_end":11510,"line_start":387,"line_end":387,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11519,"byte_end":11559,"line_start":388,"line_end":388,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11849,"byte_end":11856,"line_start":397,"line_end":397,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets a mutable reference to the underlying value.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11719,"byte_end":11772,"line_start":394,"line_end":394,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11781,"byte_end":11784,"line_start":395,"line_end":395,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11793,"byte_end":11833,"line_start":396,"line_end":396,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12548,"byte_end":12551,"line_start":419,"line_end":419,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"pub fn set(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12012,"byte_end":12058,"line_start":402,"line_end":402,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12067,"byte_end":12070,"line_start":403,"line_end":403,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12079,"byte_end":12148,"line_start":404,"line_end":404,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12157,"byte_end":12166,"line_start":405,"line_end":405,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12175,"byte_end":12178,"line_start":406,"line_end":406,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12187,"byte_end":12200,"line_start":407,"line_end":407,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12209,"byte_end":12216,"line_start":408,"line_end":408,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12225,"byte_end":12261,"line_start":409,"line_end":409,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12270,"byte_end":12273,"line_start":410,"line_end":410,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12282,"byte_end":12313,"line_start":411,"line_end":411,"column_start":9,"column_end":40}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12322,"byte_end":12356,"line_start":412,"line_end":412,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12365,"byte_end":12368,"line_start":413,"line_end":413,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(cell.set(92), Ok(()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12377,"byte_end":12414,"line_start":414,"line_end":414,"column_start":9,"column_end":46}},{"value":"/ assert_eq!(cell.set(62), Err(62));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12423,"byte_end":12461,"line_start":415,"line_end":415,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12470,"byte_end":12473,"line_start":416,"line_end":416,"column_start":9,"column_end":12}},{"value":"/ assert!(cell.get().is_some());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12482,"byte_end":12516,"line_start":417,"line_end":417,"column_start":9,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":12525,"byte_end":12532,"line_start":418,"line_end":418,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13848,"byte_end":13859,"line_start":454,"line_end":454,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"pub fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f`\n if the cell was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f`","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13109,"byte_end":13168,"line_start":433,"line_end":433,"column_start":9,"column_end":68}},{"value":"/ if the cell was empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13177,"byte_end":13203,"line_start":434,"line_end":434,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13212,"byte_end":13215,"line_start":435,"line_end":435,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13224,"byte_end":13236,"line_start":436,"line_end":436,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13245,"byte_end":13248,"line_start":437,"line_end":437,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13257,"byte_end":13327,"line_start":438,"line_end":438,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13336,"byte_end":13362,"line_start":439,"line_end":439,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13371,"byte_end":13374,"line_start":440,"line_end":440,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13383,"byte_end":13452,"line_start":441,"line_end":441,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13461,"byte_end":13487,"line_start":442,"line_end":442,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13496,"byte_end":13499,"line_start":443,"line_end":443,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13508,"byte_end":13521,"line_start":444,"line_end":444,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13530,"byte_end":13537,"line_start":445,"line_end":445,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13546,"byte_end":13582,"line_start":446,"line_end":446,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13591,"byte_end":13594,"line_start":447,"line_end":447,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13603,"byte_end":13634,"line_start":448,"line_end":448,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13643,"byte_end":13683,"line_start":449,"line_end":449,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13692,"byte_end":13719,"line_start":450,"line_end":450,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13728,"byte_end":13780,"line_start":451,"line_end":451,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13789,"byte_end":13816,"line_start":452,"line_end":452,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":13825,"byte_end":13832,"line_start":453,"line_end":453,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15067,"byte_end":15082,"line_start":490,"line_end":490,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"pub fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14134,"byte_end":14196,"line_start":465,"line_end":465,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14205,"byte_end":14269,"line_start":466,"line_end":466,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14278,"byte_end":14300,"line_start":467,"line_end":467,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14309,"byte_end":14312,"line_start":468,"line_end":468,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14321,"byte_end":14333,"line_start":469,"line_end":469,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14342,"byte_end":14345,"line_start":470,"line_end":470,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14354,"byte_end":14424,"line_start":471,"line_end":471,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14433,"byte_end":14459,"line_start":472,"line_end":472,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14468,"byte_end":14471,"line_start":473,"line_end":473,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. Doing","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14480,"byte_end":14549,"line_start":474,"line_end":474,"column_start":9,"column_end":78}},{"value":"/ so results in a panic.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14558,"byte_end":14584,"line_start":475,"line_end":475,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14593,"byte_end":14596,"line_start":476,"line_end":476,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14605,"byte_end":14618,"line_start":477,"line_end":477,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14627,"byte_end":14634,"line_start":478,"line_end":478,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14643,"byte_end":14679,"line_start":479,"line_end":479,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14688,"byte_end":14691,"line_start":480,"line_end":480,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14700,"byte_end":14731,"line_start":481,"line_end":481,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14740,"byte_end":14798,"line_start":482,"line_end":482,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14807,"byte_end":14841,"line_start":483,"line_end":483,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14850,"byte_end":14910,"line_start":484,"line_end":484,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14919,"byte_end":14933,"line_start":485,"line_end":485,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14942,"byte_end":14949,"line_start":486,"line_end":486,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14958,"byte_end":14989,"line_start":487,"line_end":487,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":14998,"byte_end":15035,"line_start":488,"line_end":488,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15044,"byte_end":15051,"line_start":489,"line_end":489,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16388,"byte_end":16392,"line_start":523,"line_end":523,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"pub fn take(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15732,"byte_end":15817,"line_start":506,"line_end":506,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15826,"byte_end":15829,"line_start":507,"line_end":507,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15838,"byte_end":15917,"line_start":508,"line_end":508,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15926,"byte_end":15929,"line_start":509,"line_end":509,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15938,"byte_end":15952,"line_start":510,"line_end":510,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15961,"byte_end":15964,"line_start":511,"line_end":511,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15973,"byte_end":15980,"line_start":512,"line_end":512,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":15989,"byte_end":16025,"line_start":513,"line_end":513,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16034,"byte_end":16037,"line_start":514,"line_end":514,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16046,"byte_end":16099,"line_start":515,"line_end":515,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16108,"byte_end":16142,"line_start":516,"line_end":516,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16151,"byte_end":16154,"line_start":517,"line_end":517,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16163,"byte_end":16198,"line_start":518,"line_end":518,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16207,"byte_end":16250,"line_start":519,"line_end":519,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16259,"byte_end":16314,"line_start":520,"line_end":520,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16323,"byte_end":16356,"line_start":521,"line_end":521,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16365,"byte_end":16372,"line_start":522,"line_end":522,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17051,"byte_end":17061,"line_start":543,"line_end":543,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"pub fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16499,"byte_end":16556,"line_start":527,"line_end":527,"column_start":9,"column_end":66}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16565,"byte_end":16568,"line_start":528,"line_end":528,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell was empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16577,"byte_end":16618,"line_start":529,"line_end":529,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16627,"byte_end":16630,"line_start":530,"line_end":530,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16639,"byte_end":16653,"line_start":531,"line_end":531,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16662,"byte_end":16665,"line_start":532,"line_end":532,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16674,"byte_end":16681,"line_start":533,"line_end":533,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16690,"byte_end":16726,"line_start":534,"line_end":534,"column_start":9,"column_end":45}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16735,"byte_end":16738,"line_start":535,"line_end":535,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16747,"byte_end":16796,"line_start":536,"line_end":536,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16805,"byte_end":16845,"line_start":537,"line_end":537,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16854,"byte_end":16857,"line_start":538,"line_end":538,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16866,"byte_end":16897,"line_start":539,"line_end":539,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16906,"byte_end":16949,"line_start":540,"line_end":540,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":16958,"byte_end":17019,"line_start":541,"line_end":541,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17028,"byte_end":17035,"line_start":542,"line_end":542,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":107},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17788,"byte_end":17792,"line_start":570,"line_end":570,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::unsync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17321,"byte_end":17374,"line_start":550,"line_end":550,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17379,"byte_end":17382,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17387,"byte_end":17400,"line_start":552,"line_end":552,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17405,"byte_end":17412,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17417,"byte_end":17449,"line_start":554,"line_end":554,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17454,"byte_end":17457,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ let lazy: Lazy<i32> = Lazy::new(|| {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17462,"byte_end":17502,"line_start":556,"line_end":556,"column_start":5,"column_end":45}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17507,"byte_end":17540,"line_start":557,"line_end":557,"column_start":5,"column_end":38}},{"value":"/     92","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17545,"byte_end":17555,"line_start":558,"line_end":558,"column_start":5,"column_end":15}},{"value":"/ });","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17560,"byte_end":17567,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"/ println!(\"ready\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17572,"byte_end":17594,"line_start":560,"line_end":560,"column_start":5,"column_end":27}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17599,"byte_end":17625,"line_start":561,"line_end":561,"column_start":5,"column_end":31}},{"value":"/ println!(\"{}\", *lazy);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17630,"byte_end":17656,"line_start":562,"line_end":562,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17661,"byte_end":17664,"line_start":563,"line_end":563,"column_start":5,"column_end":8}},{"value":"/ // Prints:","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17669,"byte_end":17683,"line_start":564,"line_end":564,"column_start":5,"column_end":19}},{"value":"/ //   ready","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17688,"byte_end":17702,"line_start":565,"line_end":565,"column_start":5,"column_end":19}},{"value":"/ //   initializing","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17707,"byte_end":17728,"line_start":566,"line_end":566,"column_start":5,"column_end":26}},{"value":"/ //   92","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17733,"byte_end":17744,"line_start":567,"line_end":567,"column_start":5,"column_end":16}},{"value":"/ //   92","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17749,"byte_end":17760,"line_start":568,"line_end":568,"column_start":5,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17765,"byte_end":17772,"line_start":569,"line_end":569,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18698,"byte_end":18701,"line_start":599,"line_end":599,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"pub const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing function.","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing function.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18264,"byte_end":18330,"line_start":585,"line_end":585,"column_start":9,"column_end":75}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18339,"byte_end":18342,"line_start":586,"line_end":586,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18351,"byte_end":18364,"line_start":587,"line_end":587,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18373,"byte_end":18380,"line_start":588,"line_end":588,"column_start":9,"column_end":16}},{"value":"/ # fn main() {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18389,"byte_end":18406,"line_start":589,"line_end":589,"column_start":9,"column_end":26}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18415,"byte_end":18447,"line_start":590,"line_end":590,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18456,"byte_end":18459,"line_start":591,"line_end":591,"column_start":9,"column_end":12}},{"value":"/ let hello = \"Hello, World!\".to_string();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18468,"byte_end":18512,"line_start":592,"line_end":592,"column_start":9,"column_end":53}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18521,"byte_end":18524,"line_start":593,"line_end":593,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| hello.to_uppercase());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18533,"byte_end":18583,"line_start":594,"line_end":594,"column_start":9,"column_end":59}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18592,"byte_end":18595,"line_start":595,"line_end":595,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(&*lazy, \"HELLO, WORLD!\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18604,"byte_end":18644,"line_start":596,"line_end":596,"column_start":9,"column_end":49}},{"value":"/ # }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18653,"byte_end":18660,"line_start":597,"line_end":597,"column_start":9,"column_end":16}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18669,"byte_end":18676,"line_start":598,"line_end":598,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19317,"byte_end":19322,"line_start":619,"line_end":619,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"pub fn force(&Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and returns a reference to\n the result.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and returns a reference to","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18867,"byte_end":18938,"line_start":605,"line_end":605,"column_start":9,"column_end":80}},{"value":"/ the result.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18947,"byte_end":18962,"line_start":606,"line_end":606,"column_start":9,"column_end":24}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18971,"byte_end":18974,"line_start":607,"line_end":607,"column_start":9,"column_end":12}},{"value":"/ This is equivalent to the `Deref` impl, but is explicit.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18983,"byte_end":19043,"line_start":608,"line_end":608,"column_start":9,"column_end":69}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19052,"byte_end":19055,"line_start":609,"line_end":609,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19064,"byte_end":19077,"line_start":610,"line_end":610,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19086,"byte_end":19093,"line_start":611,"line_end":611,"column_start":9,"column_end":16}},{"value":"/ use once_cell::unsync::Lazy;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19102,"byte_end":19134,"line_start":612,"line_end":612,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19143,"byte_end":19146,"line_start":613,"line_end":613,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19155,"byte_end":19187,"line_start":614,"line_end":614,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19196,"byte_end":19199,"line_start":615,"line_end":615,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19208,"byte_end":19248,"line_start":616,"line_end":616,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19257,"byte_end":19285,"line_start":617,"line_end":617,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19294,"byte_end":19301,"line_start":618,"line_end":618,"column_start":9,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":141},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20170,"byte_end":20174,"line_start":650,"line_end":650,"column_start":9,"column_end":13},"name":"sync","qualname":"::sync","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":190},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":209},{"krate":0,"index":214},{"krate":0,"index":219},{"krate":0,"index":224},{"krate":0,"index":227}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20138,"byte_end":20161,"line_start":649,"line_end":649,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":151},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21414,"byte_end":21422,"line_start":688,"line_end":688,"column_start":16,"column_end":24},"name":"OnceCell","qualname":"::sync::OnceCell","value":"","parent":null,"children":[],"decl_id":null,"docs":" A thread-safe cell which can be written to only once.","sig":null,"attributes":[{"value":"/ A thread-safe cell which can be written to only once.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20342,"byte_end":20399,"line_start":660,"line_end":660,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20404,"byte_end":20407,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ `OnceCell` provides `&` references to the contents without RAII guards.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20412,"byte_end":20487,"line_start":662,"line_end":662,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20492,"byte_end":20495,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ Reading a non-`None` value out of `OnceCell` establishes a","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20500,"byte_end":20562,"line_start":664,"line_end":664,"column_start":5,"column_end":67}},{"value":"/ happens-before relationship with a corresponding write. For example, if","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20567,"byte_end":20642,"line_start":665,"line_end":665,"column_start":5,"column_end":80}},{"value":"/ thread A initializes the cell with `get_or_init(f)`, and thread B","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20647,"byte_end":20716,"line_start":666,"line_end":666,"column_start":5,"column_end":74}},{"value":"/ subsequently reads the result of this call, B also observes all the side","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20721,"byte_end":20797,"line_start":667,"line_end":667,"column_start":5,"column_end":81}},{"value":"/ effects of `f`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20802,"byte_end":20821,"line_start":668,"line_end":668,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20826,"byte_end":20829,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20834,"byte_end":20847,"line_start":670,"line_end":670,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20852,"byte_end":20859,"line_start":671,"line_end":671,"column_start":5,"column_end":12}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20864,"byte_end":20898,"line_start":672,"line_end":672,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20903,"byte_end":20906,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ static CELL: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20911,"byte_end":20963,"line_start":674,"line_end":674,"column_start":5,"column_end":57}},{"value":"/ assert!(CELL.get().is_none());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":20968,"byte_end":21002,"line_start":675,"line_end":675,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21007,"byte_end":21010,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ std::thread::spawn(|| {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21015,"byte_end":21042,"line_start":677,"line_end":677,"column_start":5,"column_end":32}},{"value":"/     let value: &String = CELL.get_or_init(|| {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21047,"byte_end":21097,"line_start":678,"line_end":678,"column_start":5,"column_end":55}},{"value":"/         \"Hello, World!\".to_string()","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21102,"byte_end":21141,"line_start":679,"line_end":679,"column_start":5,"column_end":44}},{"value":"/     });","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21146,"byte_end":21157,"line_start":680,"line_end":680,"column_start":5,"column_end":16}},{"value":"/     assert_eq!(value, \"Hello, World!\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21162,"byte_end":21205,"line_start":681,"line_end":681,"column_start":5,"column_end":48}},{"value":"/ }).join().unwrap();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21210,"byte_end":21233,"line_start":682,"line_end":682,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21238,"byte_end":21241,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ let value: Option<&String> = CELL.get();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21246,"byte_end":21290,"line_start":684,"line_end":684,"column_start":5,"column_end":49}},{"value":"/ assert!(value.is_some());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21295,"byte_end":21324,"line_start":685,"line_end":685,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(value.unwrap().as_str(), \"Hello, World!\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21329,"byte_end":21386,"line_start":686,"line_end":686,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21391,"byte_end":21398,"line_start":687,"line_end":687,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22691,"byte_end":22694,"line_start":736,"line_end":736,"column_start":22,"column_end":25},"name":"new","qualname":"<OnceCell<T>>::new","value":"pub const fn new() -> OnceCell<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty cell.\n","sig":null,"attributes":[{"value":"/ Creates a new empty cell.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22640,"byte_end":22669,"line_start":735,"line_end":735,"column_start":9,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22950,"byte_end":22953,"line_start":744,"line_end":744,"column_start":16,"column_end":19},"name":"get","qualname":"<OnceCell<T>>::get","value":"pub fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the reference to the underlying value.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22766,"byte_end":22813,"line_start":740,"line_end":740,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22822,"byte_end":22825,"line_start":741,"line_end":741,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty, or being initialized. This","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22834,"byte_end":22901,"line_start":742,"line_end":742,"column_start":9,"column_end":76}},{"value":"/ method never blocks.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22910,"byte_end":22934,"line_start":743,"line_end":743,"column_start":9,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23329,"byte_end":23336,"line_start":756,"line_end":756,"column_start":16,"column_end":23},"name":"get_mut","qualname":"<OnceCell<T>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Gets the mutable reference to the underlying value.","sig":null,"attributes":[{"value":"/ Gets the mutable reference to the underlying value.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23197,"byte_end":23252,"line_start":753,"line_end":753,"column_start":9,"column_end":64}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23261,"byte_end":23264,"line_start":754,"line_end":754,"column_start":9,"column_end":12}},{"value":"/ Returns `None` if the cell is empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23273,"byte_end":23313,"line_start":755,"line_end":755,"column_start":9,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23738,"byte_end":23751,"line_start":767,"line_end":767,"column_start":23,"column_end":36},"name":"get_unchecked","qualname":"<OnceCell<T>>::get_unchecked","value":"pub unsafe fn get_unchecked(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Get the reference to the underlying value, without checking if the\n cell is initialized.","sig":null,"attributes":[{"value":"/ Get the reference to the underlying value, without checking if the","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23416,"byte_end":23486,"line_start":760,"line_end":760,"column_start":9,"column_end":79}},{"value":"/ cell is initialized.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23495,"byte_end":23519,"line_start":761,"line_end":761,"column_start":9,"column_end":33}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23528,"byte_end":23531,"line_start":762,"line_end":762,"column_start":9,"column_end":12}},{"value":"/ # Safety","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23540,"byte_end":23552,"line_start":763,"line_end":763,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23561,"byte_end":23564,"line_start":764,"line_end":764,"column_start":9,"column_end":12}},{"value":"/ Caller must ensure that the cell is in initialized state, and that","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23573,"byte_end":23643,"line_start":765,"line_end":765,"column_start":9,"column_end":79}},{"value":"/ the contents are acquired by (synchronized to) this thread.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23652,"byte_end":23715,"line_start":766,"line_end":766,"column_start":9,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24535,"byte_end":24538,"line_start":794,"line_end":794,"column_start":16,"column_end":19},"name":"set","qualname":"<OnceCell<T>>::set","value":"pub fn set(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Sets the contents of this cell to `value`.","sig":null,"attributes":[{"value":"/ Sets the contents of this cell to `value`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23821,"byte_end":23867,"line_start":771,"line_end":771,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23876,"byte_end":23879,"line_start":772,"line_end":772,"column_start":9,"column_end":12}},{"value":"/ Returns `Ok(())` if the cell was empty and `Err(value)` if it was","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23888,"byte_end":23957,"line_start":773,"line_end":773,"column_start":9,"column_end":78}},{"value":"/ full.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23966,"byte_end":23975,"line_start":774,"line_end":774,"column_start":9,"column_end":18}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23984,"byte_end":23987,"line_start":775,"line_end":775,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":23996,"byte_end":24009,"line_start":776,"line_end":776,"column_start":9,"column_end":22}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24018,"byte_end":24021,"line_start":777,"line_end":777,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24030,"byte_end":24037,"line_start":778,"line_end":778,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24046,"byte_end":24080,"line_start":779,"line_end":779,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24089,"byte_end":24092,"line_start":780,"line_end":780,"column_start":9,"column_end":12}},{"value":"/ static CELL: OnceCell<i32> = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24101,"byte_end":24150,"line_start":781,"line_end":781,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24159,"byte_end":24162,"line_start":782,"line_end":782,"column_start":9,"column_end":12}},{"value":"/ fn main() {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24171,"byte_end":24186,"line_start":783,"line_end":783,"column_start":9,"column_end":24}},{"value":"/     assert!(CELL.get().is_none());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24195,"byte_end":24233,"line_start":784,"line_end":784,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24242,"byte_end":24245,"line_start":785,"line_end":785,"column_start":9,"column_end":12}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24254,"byte_end":24285,"line_start":786,"line_end":786,"column_start":9,"column_end":40}},{"value":"/         assert_eq!(CELL.set(92), Ok(()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24294,"byte_end":24339,"line_start":787,"line_end":787,"column_start":9,"column_end":54}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24348,"byte_end":24375,"line_start":788,"line_end":788,"column_start":9,"column_end":36}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24384,"byte_end":24387,"line_start":789,"line_end":789,"column_start":9,"column_end":12}},{"value":"/     assert_eq!(CELL.set(62), Err(62));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24396,"byte_end":24438,"line_start":790,"line_end":790,"column_start":9,"column_end":51}},{"value":"/     assert_eq!(CELL.get(), Some(&92));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24447,"byte_end":24489,"line_start":791,"line_end":791,"column_start":9,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24498,"byte_end":24503,"line_start":792,"line_end":792,"column_start":9,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24512,"byte_end":24519,"line_start":793,"line_end":793,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25842,"byte_end":25853,"line_start":829,"line_end":829,"column_start":16,"column_end":27},"name":"get_or_init","qualname":"<OnceCell<T>>::get_or_init","value":"pub fn get_or_init<F>(&Self, F) -> &T where F: FnOnce() -> T","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if the cell\n was empty.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if the cell","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24806,"byte_end":24877,"line_start":803,"line_end":803,"column_start":9,"column_end":80}},{"value":"/ was empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24886,"byte_end":24900,"line_start":804,"line_end":804,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24909,"byte_end":24912,"line_start":805,"line_end":805,"column_start":9,"column_end":12}},{"value":"/ Many threads may call `get_or_init` concurrently with different","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24921,"byte_end":24988,"line_start":806,"line_end":806,"column_start":9,"column_end":76}},{"value":"/ initializing functions, but it is guaranteed that only one function","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":24997,"byte_end":25068,"line_start":807,"line_end":807,"column_start":9,"column_end":80}},{"value":"/ will be executed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25077,"byte_end":25098,"line_start":808,"line_end":808,"column_start":9,"column_end":30}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25107,"byte_end":25110,"line_start":809,"line_end":809,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25119,"byte_end":25131,"line_start":810,"line_end":810,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25140,"byte_end":25143,"line_start":811,"line_end":811,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and the cell","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25152,"byte_end":25222,"line_start":812,"line_end":812,"column_start":9,"column_end":79}},{"value":"/ remains uninitialized.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25231,"byte_end":25257,"line_start":813,"line_end":813,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25266,"byte_end":25269,"line_start":814,"line_end":814,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`. The","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25278,"byte_end":25345,"line_start":815,"line_end":815,"column_start":9,"column_end":76}},{"value":"/ exact outcome is unspecified. Current implementation deadlocks, but","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25354,"byte_end":25425,"line_start":816,"line_end":816,"column_start":9,"column_end":80}},{"value":"/ this may be changed to a panic in the future.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25434,"byte_end":25483,"line_start":817,"line_end":817,"column_start":9,"column_end":58}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25492,"byte_end":25495,"line_start":818,"line_end":818,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25504,"byte_end":25517,"line_start":819,"line_end":819,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25526,"byte_end":25533,"line_start":820,"line_end":820,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25542,"byte_end":25576,"line_start":821,"line_end":821,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25585,"byte_end":25588,"line_start":822,"line_end":822,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25597,"byte_end":25628,"line_start":823,"line_end":823,"column_start":9,"column_end":40}},{"value":"/ let value = cell.get_or_init(|| 92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25637,"byte_end":25677,"line_start":824,"line_end":824,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25686,"byte_end":25713,"line_start":825,"line_end":825,"column_start":9,"column_end":36}},{"value":"/ let value = cell.get_or_init(|| unreachable!());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25722,"byte_end":25774,"line_start":826,"line_end":826,"column_start":9,"column_end":61}},{"value":"/ assert_eq!(value, &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25783,"byte_end":25810,"line_start":827,"line_end":827,"column_start":9,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":25819,"byte_end":25826,"line_start":828,"line_end":828,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27160,"byte_end":27175,"line_start":866,"line_end":866,"column_start":16,"column_end":31},"name":"get_or_try_init","qualname":"<OnceCell<T>>::get_or_try_init","value":"pub fn get_or_try_init<F, E>(&Self, F) -> Result<&T, E> where F: FnOnce() ->\nResult<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Gets the contents of the cell, initializing it with `f` if\n the cell was empty. If the cell was empty and `f` failed, an\n error is returned.","sig":null,"attributes":[{"value":"/ Gets the contents of the cell, initializing it with `f` if","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26128,"byte_end":26190,"line_start":840,"line_end":840,"column_start":9,"column_end":71}},{"value":"/ the cell was empty. If the cell was empty and `f` failed, an","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26199,"byte_end":26263,"line_start":841,"line_end":841,"column_start":9,"column_end":73}},{"value":"/ error is returned.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26272,"byte_end":26294,"line_start":842,"line_end":842,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26303,"byte_end":26306,"line_start":843,"line_end":843,"column_start":9,"column_end":12}},{"value":"/ # Panics","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26315,"byte_end":26327,"line_start":844,"line_end":844,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26336,"byte_end":26339,"line_start":845,"line_end":845,"column_start":9,"column_end":12}},{"value":"/ If `f` panics, the panic is propagated to the caller, and","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26348,"byte_end":26409,"line_start":846,"line_end":846,"column_start":9,"column_end":70}},{"value":"/ the cell remains uninitialized.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26418,"byte_end":26453,"line_start":847,"line_end":847,"column_start":9,"column_end":44}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26462,"byte_end":26465,"line_start":848,"line_end":848,"column_start":9,"column_end":12}},{"value":"/ It is an error to reentrantly initialize the cell from `f`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26474,"byte_end":26537,"line_start":849,"line_end":849,"column_start":9,"column_end":72}},{"value":"/ The exact outcome is unspecified. Current implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26546,"byte_end":26606,"line_start":850,"line_end":850,"column_start":9,"column_end":69}},{"value":"/ deadlocks, but this may be changed to a panic in the future.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26615,"byte_end":26679,"line_start":851,"line_end":851,"column_start":9,"column_end":73}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26688,"byte_end":26691,"line_start":852,"line_end":852,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26700,"byte_end":26713,"line_start":853,"line_end":853,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26722,"byte_end":26729,"line_start":854,"line_end":854,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26738,"byte_end":26772,"line_start":855,"line_end":855,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26781,"byte_end":26784,"line_start":856,"line_end":856,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26793,"byte_end":26824,"line_start":857,"line_end":857,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26833,"byte_end":26891,"line_start":858,"line_end":858,"column_start":9,"column_end":67}},{"value":"/ assert!(cell.get().is_none());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26900,"byte_end":26934,"line_start":859,"line_end":859,"column_start":9,"column_end":43}},{"value":"/ let value = cell.get_or_try_init(|| -> Result<i32, ()> {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":26943,"byte_end":27003,"line_start":860,"line_end":860,"column_start":9,"column_end":69}},{"value":"/     Ok(92)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27012,"byte_end":27026,"line_start":861,"line_end":861,"column_start":9,"column_end":23}},{"value":"/ });","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27035,"byte_end":27042,"line_start":862,"line_end":862,"column_start":9,"column_end":16}},{"value":"/ assert_eq!(value, Ok(&92));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27051,"byte_end":27082,"line_start":863,"line_end":863,"column_start":9,"column_end":40}},{"value":"/ assert_eq!(cell.get(), Some(&92))","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27091,"byte_end":27128,"line_start":864,"line_end":864,"column_start":9,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27137,"byte_end":27144,"line_start":865,"line_end":865,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28257,"byte_end":28261,"line_start":898,"line_end":898,"column_start":16,"column_end":20},"name":"take","qualname":"<OnceCell<T>>::take","value":"pub fn take(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","sig":null,"attributes":[{"value":"/ Takes the value out of this `OnceCell`, moving it back to an uninitialized state.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27603,"byte_end":27688,"line_start":881,"line_end":881,"column_start":9,"column_end":94}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27697,"byte_end":27700,"line_start":882,"line_end":882,"column_start":9,"column_end":12}},{"value":"/ Has no effect and returns `None` if the `OnceCell` hasn't been initialized.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27709,"byte_end":27788,"line_start":883,"line_end":883,"column_start":9,"column_end":88}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27797,"byte_end":27800,"line_start":884,"line_end":884,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27809,"byte_end":27823,"line_start":885,"line_end":885,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27832,"byte_end":27835,"line_start":886,"line_end":886,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27844,"byte_end":27851,"line_start":887,"line_end":887,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27860,"byte_end":27894,"line_start":888,"line_end":888,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27903,"byte_end":27906,"line_start":889,"line_end":889,"column_start":9,"column_end":12}},{"value":"/ let mut cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27915,"byte_end":27968,"line_start":890,"line_end":890,"column_start":9,"column_end":62}},{"value":"/ assert_eq!(cell.take(), None);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":27977,"byte_end":28011,"line_start":891,"line_end":891,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28020,"byte_end":28023,"line_start":892,"line_end":892,"column_start":9,"column_end":12}},{"value":"/ let mut cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28032,"byte_end":28067,"line_start":893,"line_end":893,"column_start":9,"column_end":44}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28076,"byte_end":28119,"line_start":894,"line_end":894,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.take(), Some(\"hello\".to_string()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28128,"byte_end":28183,"line_start":895,"line_end":895,"column_start":9,"column_end":64}},{"value":"/ assert_eq!(cell.get(), None);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28192,"byte_end":28225,"line_start":896,"line_end":896,"column_start":9,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28234,"byte_end":28241,"line_start":897,"line_end":897,"column_start":9,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28906,"byte_end":28916,"line_start":917,"line_end":917,"column_start":16,"column_end":26},"name":"into_inner","qualname":"<OnceCell<T>>::into_inner","value":"pub fn into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `OnceCell`, returning the wrapped value. Returns\n `None` if the cell was empty.","sig":null,"attributes":[{"value":"/ Consumes the `OnceCell`, returning the wrapped value. Returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28368,"byte_end":28433,"line_start":902,"line_end":902,"column_start":9,"column_end":74}},{"value":"/ `None` if the cell was empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28442,"byte_end":28475,"line_start":903,"line_end":903,"column_start":9,"column_end":42}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28484,"byte_end":28487,"line_start":904,"line_end":904,"column_start":9,"column_end":12}},{"value":"/ # Examples","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28496,"byte_end":28510,"line_start":905,"line_end":905,"column_start":9,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28519,"byte_end":28522,"line_start":906,"line_end":906,"column_start":9,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28531,"byte_end":28538,"line_start":907,"line_end":907,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::OnceCell;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28547,"byte_end":28581,"line_start":908,"line_end":908,"column_start":9,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28590,"byte_end":28593,"line_start":909,"line_end":909,"column_start":9,"column_end":12}},{"value":"/ let cell: OnceCell<String> = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28602,"byte_end":28651,"line_start":910,"line_end":910,"column_start":9,"column_end":58}},{"value":"/ assert_eq!(cell.into_inner(), None);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28660,"byte_end":28700,"line_start":911,"line_end":911,"column_start":9,"column_end":49}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28709,"byte_end":28712,"line_start":912,"line_end":912,"column_start":9,"column_end":12}},{"value":"/ let cell = OnceCell::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28721,"byte_end":28752,"line_start":913,"line_end":913,"column_start":9,"column_end":40}},{"value":"/ cell.set(\"hello\".to_string()).unwrap();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28761,"byte_end":28804,"line_start":914,"line_end":914,"column_start":9,"column_end":52}},{"value":"/ assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28813,"byte_end":28874,"line_start":915,"line_end":915,"column_start":9,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28883,"byte_end":28890,"line_start":916,"line_end":916,"column_start":9,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":190},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29928,"byte_end":29932,"line_start":955,"line_end":955,"column_start":16,"column_end":20},"name":"Lazy","qualname":"::sync::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":28991,"byte_end":29044,"line_start":922,"line_end":922,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29049,"byte_end":29052,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ This type is thread-safe and can be used in statics.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29057,"byte_end":29113,"line_start":924,"line_end":924,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29118,"byte_end":29121,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29126,"byte_end":29139,"line_start":926,"line_end":926,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29144,"byte_end":29147,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29152,"byte_end":29159,"line_start":928,"line_end":928,"column_start":5,"column_end":12}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29164,"byte_end":29198,"line_start":929,"line_end":929,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29203,"byte_end":29206,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29211,"byte_end":29241,"line_start":931,"line_end":931,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29246,"byte_end":29249,"line_start":932,"line_end":932,"column_start":5,"column_end":8}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29254,"byte_end":29317,"line_start":933,"line_end":933,"column_start":5,"column_end":68}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29322,"byte_end":29355,"line_start":934,"line_end":934,"column_start":5,"column_end":38}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29360,"byte_end":29395,"line_start":935,"line_end":935,"column_start":5,"column_end":40}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29400,"byte_end":29442,"line_start":936,"line_end":936,"column_start":5,"column_end":47}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29447,"byte_end":29490,"line_start":937,"line_end":937,"column_start":5,"column_end":48}},{"value":"/     m","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29495,"byte_end":29504,"line_start":938,"line_end":938,"column_start":5,"column_end":14}},{"value":"/ });","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29509,"byte_end":29516,"line_start":939,"line_end":939,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29521,"byte_end":29524,"line_start":940,"line_end":940,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29529,"byte_end":29544,"line_start":941,"line_end":941,"column_start":5,"column_end":20}},{"value":"/     println!(\"ready\");","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29549,"byte_end":29575,"line_start":942,"line_end":942,"column_start":5,"column_end":31}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29580,"byte_end":29611,"line_start":943,"line_end":943,"column_start":5,"column_end":36}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29616,"byte_end":29663,"line_start":944,"line_end":944,"column_start":5,"column_end":52}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29668,"byte_end":29695,"line_start":945,"line_end":945,"column_start":5,"column_end":32}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29700,"byte_end":29743,"line_start":946,"line_end":946,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29748,"byte_end":29751,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/     // Prints:","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29756,"byte_end":29774,"line_start":948,"line_end":948,"column_start":5,"column_end":23}},{"value":"/     //   ready","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29779,"byte_end":29797,"line_start":949,"line_end":949,"column_start":5,"column_end":23}},{"value":"/     //   initializing","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29802,"byte_end":29827,"line_start":950,"line_end":950,"column_start":5,"column_end":30}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29832,"byte_end":29858,"line_start":951,"line_end":951,"column_start":5,"column_end":31}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29863,"byte_end":29890,"line_start":952,"line_end":952,"column_start":5,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29895,"byte_end":29900,"line_start":953,"line_end":953,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":29905,"byte_end":29912,"line_start":954,"line_end":954,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30887,"byte_end":30890,"line_start":980,"line_end":980,"column_start":22,"column_end":25},"name":"new","qualname":"<Lazy<T, F>>::new","value":"pub const fn new(F) -> Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30787,"byte_end":30843,"line_start":978,"line_end":978,"column_start":9,"column_end":65}},{"value":"/ function.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30852,"byte_end":30865,"line_start":979,"line_end":979,"column_start":9,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31486,"byte_end":31491,"line_start":999,"line_end":999,"column_start":16,"column_end":21},"name":"force","qualname":"<Lazy<T, F>>::force","value":"pub fn force(&Lazy<T, F>) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to the result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31050,"byte_end":31098,"line_start":986,"line_end":986,"column_start":9,"column_end":57}},{"value":"/ returns a reference to the result. This is equivalent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31107,"byte_end":31164,"line_start":987,"line_end":987,"column_start":9,"column_end":66}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31173,"byte_end":31214,"line_start":988,"line_end":988,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31223,"byte_end":31226,"line_start":989,"line_end":989,"column_start":9,"column_end":12}},{"value":"/ # Example","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31235,"byte_end":31248,"line_start":990,"line_end":990,"column_start":9,"column_end":22}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31257,"byte_end":31264,"line_start":991,"line_end":991,"column_start":9,"column_end":16}},{"value":"/ use once_cell::sync::Lazy;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31273,"byte_end":31303,"line_start":992,"line_end":992,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31312,"byte_end":31315,"line_start":993,"line_end":993,"column_start":9,"column_end":12}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31324,"byte_end":31356,"line_start":994,"line_end":994,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31365,"byte_end":31368,"line_start":995,"line_end":995,"column_start":9,"column_end":12}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31377,"byte_end":31417,"line_start":996,"line_end":996,"column_start":9,"column_end":49}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31426,"byte_end":31454,"line_start":997,"line_end":997,"column_start":9,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31463,"byte_end":31470,"line_start":998,"line_end":998,"column_start":9,"column_end":16}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33719,"byte_end":33727,"line_start":29,"line_end":29,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33764,"byte_end":33772,"line_start":30,"line_end":30,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33834,"byte_end":33842,"line_start":32,"line_end":32,"column_start":55,"column_end":63},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33884,"byte_end":33892,"line_start":33,"line_end":33,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":34779,"byte_end":34787,"line_start":61,"line_end":61,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":39925,"byte_end":39936,"line_start":210,"line_end":210,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10054,"byte_end":10062,"line_start":334,"line_end":334,"column_start":59,"column_end":67},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10136,"byte_end":10144,"line_start":336,"line_end":336,"column_start":40,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10176,"byte_end":10184,"line_start":338,"line_end":338,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10301,"byte_end":10309,"line_start":344,"line_end":344,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10598,"byte_end":10606,"line_start":353,"line_end":353,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10967,"byte_end":10975,"line_start":366,"line_end":366,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11104,"byte_end":11112,"line_start":372,"line_end":372,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11144,"byte_end":11152,"line_start":374,"line_end":374,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11284,"byte_end":11292,"line_start":380,"line_end":380,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17954,"byte_end":17958,"line_start":576,"line_end":576,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18044,"byte_end":18048,"line_start":578,"line_end":578,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18243,"byte_end":18247,"line_start":584,"line_end":584,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18846,"byte_end":18850,"line_start":604,"line_end":604,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19594,"byte_end":19598,"line_start":627,"line_end":627,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19754,"byte_end":19758,"line_start":634,"line_end":634,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19958,"byte_end":19962,"line_start":641,"line_end":641,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21460,"byte_end":21468,"line_start":690,"line_end":690,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21596,"byte_end":21604,"line_start":696,"line_end":696,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21893,"byte_end":21901,"line_start":705,"line_end":705,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22249,"byte_end":22257,"line_start":718,"line_end":718,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22446,"byte_end":22454,"line_start":726,"line_end":726,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22590,"byte_end":22598,"line_start":732,"line_end":732,"column_start":24,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22618,"byte_end":22626,"line_start":734,"line_end":734,"column_start":13,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":181},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30060,"byte_end":30064,"line_start":960,"line_end":960,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30549,"byte_end":30553,"line_start":971,"line_end":971,"column_start":38,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30703,"byte_end":30707,"line_start":975,"line_end":975,"column_start":49,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30766,"byte_end":30770,"line_start":977,"line_end":977,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31029,"byte_end":31033,"line_start":985,"line_end":985,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31763,"byte_end":31767,"line_start":1007,"line_end":1007,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31923,"byte_end":31927,"line_start":1014,"line_end":1014,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":32127,"byte_end":32131,"line_start":1021,"line_end":1021,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33719,"byte_end":33727,"line_start":29,"line_end":29,"column_start":38,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":228},"to":{"krate":2,"index":1983}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33764,"byte_end":33772,"line_start":30,"line_end":30,"column_start":31,"column_end":39},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":228},"to":{"krate":2,"index":1971}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33834,"byte_end":33842,"line_start":32,"line_end":32,"column_start":55,"column_end":63},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":3800}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":33884,"byte_end":33892,"line_start":33,"line_end":33,"column_start":36,"column_end":44},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":228},"to":{"krate":1,"index":3799}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":34779,"byte_end":34787,"line_start":61,"line_end":61,"column_start":9,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/imp_std.rs","byte_start":39925,"byte_end":39936,"line_start":210,"line_end":210,"column_start":15,"column_end":26},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":36},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10054,"byte_end":10062,"line_start":334,"line_end":334,"column_start":59,"column_end":67},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":68},"to":{"krate":1,"index":3800}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10136,"byte_end":10144,"line_start":336,"line_end":336,"column_start":40,"column_end":48},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":68},"to":{"krate":1,"index":3799}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10176,"byte_end":10184,"line_start":338,"line_end":338,"column_start":25,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10301,"byte_end":10309,"line_start":344,"line_end":344,"column_start":40,"column_end":48},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10598,"byte_end":10606,"line_start":353,"line_end":353,"column_start":30,"column_end":38},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":10967,"byte_end":10975,"line_start":366,"line_end":366,"column_start":38,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11104,"byte_end":11112,"line_start":372,"line_end":372,"column_start":24,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1702}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11144,"byte_end":11152,"line_start":374,"line_end":374,"column_start":25,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":68},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":11284,"byte_end":11292,"line_start":380,"line_end":380,"column_start":13,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":68},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":17954,"byte_end":17958,"line_start":576,"line_end":576,"column_start":49,"column_end":53},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":107},"to":{"krate":1,"index":3800}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18044,"byte_end":18048,"line_start":578,"line_end":578,"column_start":43,"column_end":47},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18243,"byte_end":18247,"line_start":584,"line_end":584,"column_start":16,"column_end":20},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":18846,"byte_end":18850,"line_start":604,"line_end":604,"column_start":31,"column_end":35},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19594,"byte_end":19598,"line_start":627,"line_end":627,"column_start":41,"column_end":45},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":2142}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19754,"byte_end":19758,"line_start":634,"line_end":634,"column_start":44,"column_end":48},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":2155}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":19958,"byte_end":19962,"line_start":641,"line_end":641,"column_start":34,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":107},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21460,"byte_end":21468,"line_start":690,"line_end":690,"column_start":25,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21596,"byte_end":21604,"line_start":696,"line_end":696,"column_start":40,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":21893,"byte_end":21901,"line_start":705,"line_end":705,"column_start":30,"column_end":38},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1669}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22249,"byte_end":22257,"line_start":718,"line_end":718,"column_start":25,"column_end":33},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22446,"byte_end":22454,"line_start":726,"line_end":726,"column_start":38,"column_end":46},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22590,"byte_end":22598,"line_start":732,"line_end":732,"column_start":24,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":151},"to":{"krate":2,"index":1702}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":22618,"byte_end":22626,"line_start":734,"line_end":734,"column_start":13,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30060,"byte_end":30064,"line_start":960,"line_end":960,"column_start":43,"column_end":47},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30549,"byte_end":30553,"line_start":971,"line_end":971,"column_start":38,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":1983}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30703,"byte_end":30707,"line_start":975,"line_end":975,"column_start":49,"column_end":53},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":190},"to":{"krate":1,"index":3800}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":30766,"byte_end":30770,"line_start":977,"line_end":977,"column_start":16,"column_end":20},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31029,"byte_end":31033,"line_start":985,"line_end":985,"column_start":31,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":190},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31763,"byte_end":31767,"line_start":1007,"line_end":1007,"column_start":41,"column_end":45},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2142}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":31923,"byte_end":31927,"line_start":1014,"line_end":1014,"column_start":44,"column_end":48},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":2155}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/once_cell-1.5.1/src/lib.rs","byte_start":32127,"byte_end":32131,"line_start":1021,"line_end":1021,"column_start":34,"column_end":38},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":190},"to":{"krate":2,"index":1959}}]}