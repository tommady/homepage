{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8","program":"/home/tommady/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_core","--edition=2018","/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=a0d7740a43000085","-C","extra-filename=-a0d7740a43000085","--out-dir","/home/tommady/code/homepage/server/target/rls/debug/deps","-L","dependency=/home/tommady/code/homepage/server/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/tommady/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tommady/code/homepage/server/target/rls/debug/deps/libfutures_core-a0d7740a43000085.rmeta"},"prelude":{"crate_id":{"name":"futures_core","disambiguator":[17193038547198007409,17631942155441301094]},"crate_root":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src","external_crates":[{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}}],"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":0,"byte_end":1447,"line_start":1,"line_end":40,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":8493},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1564,"byte_end":1570,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":2,"index":8493},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1212,"byte_end":1218,"line_start":28,"line_end":28,"column_start":39,"column_end":45},"alias_span":null,"name":"Future","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1220,"byte_end":1231,"line_start":28,"line_end":28,"column_start":47,"column_end":58},"alias_span":null,"name":"FusedFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1233,"byte_end":1242,"line_start":28,"line_end":28,"column_start":60,"column_end":69},"alias_span":null,"name":"TryFuture","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":68},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1300,"byte_end":1306,"line_start":31,"line_end":31,"column_start":39,"column_end":45},"alias_span":null,"name":"Stream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":82},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1308,"byte_end":1319,"line_start":31,"line_end":31,"column_start":47,"column_end":58},"alias_span":null,"name":"FusedStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":97},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1321,"byte_end":1330,"line_start":31,"line_end":31,"column_start":60,"column_end":69},"alias_span":null,"name":"TryStream","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":142},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/mod.rs","byte_start":13508,"byte_end":13519,"line_start":4,"line_end":4,"column_start":29,"column_end":40},"alias_span":null,"name":"AtomicWaker","value":"","parent":{"krate":0,"index":132}},{"kind":"Use","ref_id":{"krate":2,"index":8659},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":12897,"byte_end":12904,"line_start":9,"line_end":9,"column_start":22,"column_end":29},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":32838},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":12906,"byte_end":12910,"line_start":9,"line_end":9,"column_start":31,"column_end":35},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":8669},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":12912,"byte_end":12917,"line_start":9,"line_end":9,"column_start":37,"column_end":42},"alias_span":null,"name":"Waker","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":32878},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":12919,"byte_end":12927,"line_start":9,"line_end":9,"column_start":44,"column_end":52},"alias_span":null,"name":"RawWaker","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":32887},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":12929,"byte_end":12943,"line_start":9,"line_end":9,"column_start":54,"column_end":68},"alias_span":null,"name":"RawWakerVTable","value":"","parent":{"krate":0,"index":129}},{"kind":"Use","ref_id":{"krate":2,"index":32838},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1440,"byte_end":1444,"line_start":39,"line_end":39,"column_start":25,"column_end":29},"alias_span":null,"name":"Poll","value":"","parent":{"krate":0,"index":168}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":0,"byte_end":1447,"line_start":1,"line_end":40,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":168}],"decl_id":null,"docs":" Core traits and types for asynchronous operations in Rust.\n","sig":null,"attributes":[{"value":"/ Core traits and types for asynchronous operations in Rust.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":0,"byte_end":62,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":189,"byte_end":277,"line_start":7,"line_end":7,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":445,"byte_end":466,"line_start":10,"line_end":10,"column_start":1,"column_end":22}},{"value":"allow(clippy :: mem_replace_with_default, clippy ::\n        match_like_matches_macro)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":671,"byte_end":748,"line_start":15,"line_end":15,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"future","qualname":"::future","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":43}],"decl_id":null,"docs":" Futures.\n","sig":null,"attributes":[{"value":"/ Futures.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1449,"byte_end":1461,"line_start":1,"line_end":1,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":11},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1748,"byte_end":1757,"line_start":12,"line_end":12,"column_start":10,"column_end":19},"name":"BoxFuture","qualname":"::future::BoxFuture","value":"Pin<alloc::boxed::Box<Future<Output = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Future`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Future`] for use in cases where you can't","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1573,"byte_end":1647,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1648,"byte_end":1712,"line_start":10,"line_end":10,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1713,"byte_end":1738,"line_start":11,"line_end":11,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":14},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1916,"byte_end":1930,"line_start":16,"line_end":16,"column_start":10,"column_end":24},"name":"LocalBoxFuture","qualname":"::future::LocalBoxFuture","value":"Pin<alloc::boxed::Box<Future<Output = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxFuture`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxFuture`, but without the `Send` requirement.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1828,"byte_end":1880,"line_start":14,"line_end":14,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1881,"byte_end":1906,"line_start":15,"line_end":15,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2457,"byte_end":2468,"line_start":26,"line_end":26,"column_start":11,"column_end":22},"name":"FusedFuture","qualname":"::future::FusedFuture","value":"FusedFuture: Future","parent":null,"children":[{"krate":0,"index":18}],"decl_id":null,"docs":" A future which tracks whether or not the underlying future\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A future which tracks whether or not the underlying future","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":1994,"byte_end":2056,"line_start":18,"line_end":18,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2057,"byte_end":2088,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2089,"byte_end":2092,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2093,"byte_end":2171,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll` (or `try_poll`) returned","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2172,"byte_end":2240,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/ `Poll::Ready`. However, `is_terminated` may also return `true` if a future","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2241,"byte_end":2319,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ has become inactive and can no longer make progress and should be ignored","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2320,"byte_end":2397,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ or dropped rather than being `poll`ed again.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2398,"byte_end":2446,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2562,"byte_end":2575,"line_start":28,"line_end":28,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::future::FusedFuture::is_terminated","value":"pub fn is_terminated(&Self) -> bool","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Returns `true` if the underlying future should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the underlying future should no longer be polled.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2483,"byte_end":2554,"line_start":27,"line_end":27,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3017,"byte_end":3023,"line_start":50,"line_end":50,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::future::private_try_future::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":32},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3247,"byte_end":3256,"line_start":57,"line_end":57,"column_start":11,"column_end":20},"name":"TryFuture","qualname":"::future::TryFuture","value":"TryFuture: Future + private_try_future::Sealed","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35}],"decl_id":null,"docs":" A convenience for futures that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for futures that return `Result` values that includes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3113,"byte_end":3184,"line_start":55,"line_end":55,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3185,"byte_end":3236,"line_start":56,"line_end":56,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":33},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3366,"byte_end":3368,"line_start":59,"line_end":59,"column_start":10,"column_end":12},"name":"Ok","qualname":"::future::TryFuture::Ok","value":"type Ok;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3300,"byte_end":3356,"line_start":58,"line_end":58,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":34},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3432,"byte_end":3437,"line_start":62,"line_end":62,"column_start":10,"column_end":15},"name":"Error","qualname":"::future::TryFuture::Error","value":"type Error;","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3375,"byte_end":3422,"line_start":61,"line_end":61,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3687,"byte_end":3695,"line_start":69,"line_end":69,"column_start":8,"column_end":16},"name":"try_poll","qualname":"::future::TryFuture::try_poll","value":"pub fn try_poll(Pin<&mut Self>, &mut Context)\n-> Poll<Result<Self::Ok, Self::Error>>","parent":{"krate":0,"index":32},"children":[],"decl_id":null,"docs":" Poll this `TryFuture` as if it were a `Future`.","sig":null,"attributes":[{"value":"/ Poll this `TryFuture` as if it were a `Future`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3444,"byte_end":3495,"line_start":64,"line_end":64,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3500,"byte_end":3503,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3508,"byte_end":3584,"line_start":66,"line_end":66,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Future` trait; in the future it won't be","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3589,"byte_end":3663,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3668,"byte_end":3679,"line_start":68,"line_end":68,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":108}],"decl_id":null,"docs":" Asynchronous streams.\n","sig":null,"attributes":[{"value":"/ Asynchronous streams.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4544,"byte_end":4569,"line_start":1,"line_end":1,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":62},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4825,"byte_end":4834,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"BoxStream","qualname":"::stream::BoxStream","value":"Pin<alloc::boxed::Box<Stream<Item = T> + Send + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" An owned dynamically typed [`Stream`] for use in cases where you can't\n statically type your result or need to add some indirection.\n","sig":null,"attributes":[{"value":"/ An owned dynamically typed [`Stream`] for use in cases where you can't","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4650,"byte_end":4724,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/ statically type your result or need to add some indirection.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4725,"byte_end":4789,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4790,"byte_end":4815,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":65},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4991,"byte_end":5005,"line_start":14,"line_end":14,"column_start":10,"column_end":24},"name":"LocalBoxStream","qualname":"::stream::LocalBoxStream","value":"Pin<alloc::boxed::Box<Stream<Item = T> + 'a>>","parent":null,"children":[],"decl_id":null,"docs":" `BoxStream`, but without the `Send` requirement.\n","sig":null,"attributes":[{"value":"/ `BoxStream`, but without the `Send` requirement.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4903,"byte_end":4955,"line_start":12,"line_end":12,"column_start":1,"column_end":53}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":4956,"byte_end":4981,"line_start":13,"line_end":13,"column_start":1,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5612,"byte_end":5618,"line_start":27,"line_end":27,"column_start":11,"column_end":17},"name":"Stream","qualname":"::stream::Stream","value":"Stream","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" A stream of values produced asynchronously.","sig":null,"attributes":[{"value":"/ A stream of values produced asynchronously.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5067,"byte_end":5114,"line_start":16,"line_end":16,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5115,"byte_end":5118,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If `Future<Output = T>` is an asynchronous version of `T`, then `Stream<Item","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5119,"byte_end":5199,"line_start":18,"line_end":18,"column_start":1,"column_end":81}},{"value":"/ = T>` is an asynchronous version of `Iterator<Item = T>`. A stream","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5200,"byte_end":5270,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/ represents a sequence of value-producing events that occur asynchronously to","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5271,"byte_end":5351,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ the caller.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5352,"byte_end":5367,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5368,"byte_end":5371,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The trait is modeled after `Future`, but allows `poll_next` to be called","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5372,"byte_end":5448,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ even after a value has been produced, yielding `None` once the stream has","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5449,"byte_end":5526,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ been fully exhausted.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5527,"byte_end":5552,"line_start":25,"line_end":25,"column_start":1,"column_end":26}},{"value":"must_use = \"streams do nothing unless polled\"","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5553,"byte_end":5601,"line_start":26,"line_end":26,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":69},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5668,"byte_end":5672,"line_start":29,"line_end":29,"column_start":10,"column_end":14},"name":"Item","qualname":"::stream::Stream::Item","value":"type Item;","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Values yielded by the stream.\n","sig":null,"attributes":[{"value":"/ Values yielded by the stream.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5625,"byte_end":5658,"line_start":28,"line_end":28,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7388,"byte_end":7397,"line_start":66,"line_end":66,"column_start":8,"column_end":17},"name":"poll_next","qualname":"::stream::Stream::poll_next","value":"pub fn poll_next(Pin<&mut Self>, &mut Context) -> Poll<Option<Self::Item>>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Attempt to pull out the next value of this stream, registering the\n current task for wakeup if the value is not yet available, and returning\n `None` if the stream is exhausted.","sig":null,"attributes":[{"value":"/ Attempt to pull out the next value of this stream, registering the","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5679,"byte_end":5749,"line_start":31,"line_end":31,"column_start":5,"column_end":75}},{"value":"/ current task for wakeup if the value is not yet available, and returning","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5754,"byte_end":5830,"line_start":32,"line_end":32,"column_start":5,"column_end":81}},{"value":"/ `None` if the stream is exhausted.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5835,"byte_end":5873,"line_start":33,"line_end":33,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5878,"byte_end":5881,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5886,"byte_end":5904,"line_start":35,"line_end":35,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5909,"byte_end":5912,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ There are several possible return values, each indicating a distinct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5917,"byte_end":5989,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ stream state:","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":5994,"byte_end":6011,"line_start":38,"line_end":38,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6016,"byte_end":6019,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Pending` means that this stream's next value is not ready","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6024,"byte_end":6094,"line_start":40,"line_end":40,"column_start":5,"column_end":75}},{"value":"/ yet. Implementations will ensure that the current task will be notified","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6099,"byte_end":6174,"line_start":41,"line_end":41,"column_start":5,"column_end":80}},{"value":"/ when the next value may be ready.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6179,"byte_end":6216,"line_start":42,"line_end":42,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6221,"byte_end":6224,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(Some(val))` means that the stream has successfully","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6229,"byte_end":6298,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ produced a value, `val`, and may produce further values on subsequent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6303,"byte_end":6376,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ `poll_next` calls.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6381,"byte_end":6403,"line_start":46,"line_end":46,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6408,"byte_end":6411,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ - `Poll::Ready(None)` means that the stream has terminated, and","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6416,"byte_end":6483,"line_start":48,"line_end":48,"column_start":5,"column_end":72}},{"value":"/ `poll_next` should not be invoked again.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6488,"byte_end":6532,"line_start":49,"line_end":49,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6537,"byte_end":6540,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6545,"byte_end":6557,"line_start":51,"line_end":51,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6562,"byte_end":6565,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Once a stream has finished (returned `Ready(None)` from `poll_next`), calling its","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6570,"byte_end":6655,"line_start":53,"line_end":53,"column_start":5,"column_end":90}},{"value":"/ `poll_next` method again may panic, block forever, or cause other kinds of","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6660,"byte_end":6738,"line_start":54,"line_end":54,"column_start":5,"column_end":83}},{"value":"/ problems; the `Stream` trait places no requirements on the effects of","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6743,"byte_end":6816,"line_start":55,"line_end":55,"column_start":5,"column_end":78}},{"value":"/ such a call. However, as the `poll_next` method is not marked `unsafe`,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6821,"byte_end":6896,"line_start":56,"line_end":56,"column_start":5,"column_end":80}},{"value":"/ Rust's usual rules apply: calls must never cause undefined behavior","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6901,"byte_end":6972,"line_start":57,"line_end":57,"column_start":5,"column_end":76}},{"value":"/ (memory corruption, incorrect use of `unsafe` functions, or the like),","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":6977,"byte_end":7051,"line_start":58,"line_end":58,"column_start":5,"column_end":79}},{"value":"/ regardless of the stream's state.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7056,"byte_end":7093,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7098,"byte_end":7101,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ If this is difficult to guard against then the [`fuse`] adapter can be used","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7106,"byte_end":7185,"line_start":61,"line_end":61,"column_start":5,"column_end":84}},{"value":"/ to ensure that `poll_next` always returns `Ready(None)` in subsequent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7190,"byte_end":7263,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ calls.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7268,"byte_end":7278,"line_start":63,"line_end":63,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7283,"byte_end":7286,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ [`fuse`]: https://docs.rs/futures/0.3/futures/stream/trait.StreamExt.html#method.fuse","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7291,"byte_end":7380,"line_start":65,"line_end":65,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8805,"byte_end":8814,"line_start":98,"line_end":98,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::stream::Stream::size_hint","value":"pub fn size_hint(&Self) -> (usize, Option<usize>)","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Returns the bounds on the remaining length of the stream.","sig":null,"attributes":[{"value":"/ Returns the bounds on the remaining length of the stream.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7499,"byte_end":7560,"line_start":71,"line_end":71,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7565,"byte_end":7568,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Specifically, `size_hint()` returns a tuple where the first element","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7573,"byte_end":7644,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ is the lower bound, and the second element is the upper bound.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7649,"byte_end":7715,"line_start":74,"line_end":74,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7720,"byte_end":7723,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ The second half of the tuple that is returned is an [`Option`]`<`[`usize`]`>`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7728,"byte_end":7810,"line_start":76,"line_end":76,"column_start":5,"column_end":87}},{"value":"/ A [`None`] here means that either there is no known upper bound, or the","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7815,"byte_end":7890,"line_start":77,"line_end":77,"column_start":5,"column_end":80}},{"value":"/ upper bound is larger than [`usize`].","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7895,"byte_end":7936,"line_start":78,"line_end":78,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7941,"byte_end":7944,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # Implementation notes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7949,"byte_end":7975,"line_start":80,"line_end":80,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7980,"byte_end":7983,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ It is not enforced that a stream implementation yields the declared","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":7988,"byte_end":8059,"line_start":82,"line_end":82,"column_start":5,"column_end":76}},{"value":"/ number of elements. A buggy stream may yield less than the lower bound","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8064,"byte_end":8138,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/ or more than the upper bound of elements.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8143,"byte_end":8188,"line_start":84,"line_end":84,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8193,"byte_end":8196,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ `size_hint()` is primarily intended to be used for optimizations such as","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8201,"byte_end":8277,"line_start":86,"line_end":86,"column_start":5,"column_end":81}},{"value":"/ reserving space for the elements of the stream, but must not be","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8282,"byte_end":8349,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/ trusted to e.g., omit bounds checks in unsafe code. An incorrect","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8354,"byte_end":8422,"line_start":88,"line_end":88,"column_start":5,"column_end":73}},{"value":"/ implementation of `size_hint()` should not lead to memory safety","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8427,"byte_end":8495,"line_start":89,"line_end":89,"column_start":5,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8500,"byte_end":8515,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8520,"byte_end":8523,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ That said, the implementation should provide a correct estimation,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8528,"byte_end":8598,"line_start":92,"line_end":92,"column_start":5,"column_end":75}},{"value":"/ because otherwise it would be a violation of the trait's protocol.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8603,"byte_end":8673,"line_start":93,"line_end":93,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8678,"byte_end":8681,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The default implementation returns `(0, `[`None`]`)` which is correct for any","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8686,"byte_end":8767,"line_start":95,"line_end":95,"column_start":5,"column_end":86}},{"value":"/ stream.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8772,"byte_end":8783,"line_start":96,"line_end":96,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":8788,"byte_end":8797,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10081,"byte_end":10092,"line_start":145,"line_end":145,"column_start":11,"column_end":22},"name":"FusedStream","qualname":"::stream::FusedStream","value":"FusedStream: Stream","parent":null,"children":[{"krate":0,"index":83}],"decl_id":null,"docs":" A stream which tracks whether or not the underlying stream\n should no longer be polled.","sig":null,"attributes":[{"value":"/ A stream which tracks whether or not the underlying stream","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9604,"byte_end":9666,"line_start":137,"line_end":137,"column_start":1,"column_end":63}},{"value":"/ should no longer be polled.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9667,"byte_end":9698,"line_start":138,"line_end":138,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9699,"byte_end":9702,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ `is_terminated` will return `true` if a future should no longer be polled.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9703,"byte_end":9781,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ Usually, this state occurs after `poll_next` (or `try_poll_next`) returned","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9782,"byte_end":9860,"line_start":141,"line_end":141,"column_start":1,"column_end":79}},{"value":"/ `Poll::Ready(None)`. However, `is_terminated` may also return `true` if a","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9861,"byte_end":9938,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ stream has become inactive and can no longer make progress and should be","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9939,"byte_end":10015,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"/ ignored or dropped rather than being polled again.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10016,"byte_end":10070,"line_start":144,"line_end":144,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10175,"byte_end":10188,"line_start":147,"line_end":147,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"::stream::FusedStream::is_terminated","value":"pub fn is_terminated(&Self) -> bool","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":" Returns `true` if the stream should no longer be polled.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the stream should no longer be polled.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10107,"byte_end":10167,"line_start":146,"line_end":146,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10630,"byte_end":10636,"line_start":169,"line_end":169,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::stream::private_try_stream::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":97},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10858,"byte_end":10867,"line_start":176,"line_end":176,"column_start":11,"column_end":20},"name":"TryStream","qualname":"::stream::TryStream","value":"TryStream: Stream + private_try_stream::Sealed","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":" A convenience for streams that return `Result` values that includes\n a variety of adapters tailored to such futures.\n","sig":null,"attributes":[{"value":"/ A convenience for streams that return `Result` values that includes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10724,"byte_end":10795,"line_start":174,"line_end":174,"column_start":1,"column_end":72}},{"value":"/ a variety of adapters tailored to such futures.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10796,"byte_end":10847,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10977,"byte_end":10979,"line_start":178,"line_end":178,"column_start":10,"column_end":12},"name":"Ok","qualname":"::stream::TryStream::Ok","value":"type Ok;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The type of successful values yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of successful values yielded by this future","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10911,"byte_end":10967,"line_start":177,"line_end":177,"column_start":5,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":99},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11043,"byte_end":11048,"line_start":181,"line_end":181,"column_start":10,"column_end":15},"name":"Error","qualname":"::stream::TryStream::Error","value":"type Error;","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" The type of failures yielded by this future\n","sig":null,"attributes":[{"value":"/ The type of failures yielded by this future","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10986,"byte_end":11033,"line_start":180,"line_end":180,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11298,"byte_end":11311,"line_start":188,"line_end":188,"column_start":8,"column_end":21},"name":"try_poll_next","qualname":"::stream::TryStream::try_poll_next","value":"pub fn try_poll_next(Pin<&mut Self>, &mut Context)\n-> Poll<Option<Result<Self::Ok, Self::Error>>>","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":" Poll this `TryStream` as if it were a `Stream`.","sig":null,"attributes":[{"value":"/ Poll this `TryStream` as if it were a `Stream`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11055,"byte_end":11106,"line_start":183,"line_end":183,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11111,"byte_end":11114,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This method is a stopgap for a compiler limitation that prevents us from","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11119,"byte_end":11195,"line_start":185,"line_end":185,"column_start":5,"column_end":81}},{"value":"/ directly inheriting from the `Stream` trait; in the future it won't be","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11200,"byte_end":11274,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ needed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11279,"byte_end":11290,"line_start":187,"line_end":187,"column_start":5,"column_end":16}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"task","qualname":"::task","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167}],"decl_id":null,"docs":" Task notification.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1334,"byte_end":1346,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/ Task notification.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":12792,"byte_end":12814,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"__internal","qualname":"::task::__internal","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/mod.rs","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":161}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":142},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16423,"byte_end":16434,"line_start":89,"line_end":89,"column_start":12,"column_end":23},"name":"AtomicWaker","qualname":"::task::__internal::atomic_waker::AtomicWaker","value":"AtomicWaker {  }","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144}],"decl_id":null,"docs":" A synchronization primitive for task wakeup.","sig":null,"attributes":[{"value":"/ A synchronization primitive for task wakeup.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":13688,"byte_end":13736,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":13737,"byte_end":13740,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Sometimes the task interested in a given event will change over time.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":13741,"byte_end":13814,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ An `AtomicWaker` can coordinate concurrent notifications with the consumer","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":13815,"byte_end":13893,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ potentially \"updating\" the underlying task to wake up. This is useful in","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":13894,"byte_end":13970,"line_start":11,"line_end":11,"column_start":1,"column_end":77}},{"value":"/ scenarios where a computation completes in another thread and wants to","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":13971,"byte_end":14045,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ notify the consumer, but the consumer is in the process of being migrated to","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14046,"byte_end":14126,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ a new logical task.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14127,"byte_end":14150,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14151,"byte_end":14154,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Consumers should call `register` before checking the result of a computation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14155,"byte_end":14235,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ and producers should call `wake` after producing the computation (this","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14236,"byte_end":14310,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ differs from the usual `thread::park` pattern). It is also permitted for","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14311,"byte_end":14387,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ `wake` to be called **before** `register`. This results in a no-op.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14388,"byte_end":14459,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14460,"byte_end":14463,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A single `AtomicWaker` may be reused for any number of calls to `register` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14464,"byte_end":14545,"line_start":21,"line_end":21,"column_start":1,"column_end":82}},{"value":"/ `wake`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14546,"byte_end":14557,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14558,"byte_end":14561,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Memory ordering","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14562,"byte_end":14583,"line_start":24,"line_end":24,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14584,"byte_end":14587,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Calling `register` \"acquires\" all memory \"released\" by calls to `wake`","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14588,"byte_end":14662,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ before the call to `register`.  Later calls to `wake` will wake the","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14663,"byte_end":14734,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/ registered waker (on contention this wake might be triggered in `register`).","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14735,"byte_end":14815,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14816,"byte_end":14819,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For concurrent calls to `register` (should be avoided) the ordering is only","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14820,"byte_end":14899,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ guaranteed for the winning call.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14900,"byte_end":14936,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14937,"byte_end":14940,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14941,"byte_end":14955,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14956,"byte_end":14959,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Here is a simple example providing a `Flag` that can be signalled manually","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":14960,"byte_end":15038,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ when it is ready.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15039,"byte_end":15060,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15061,"byte_end":15064,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15065,"byte_end":15072,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use futures::future::Future;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15073,"byte_end":15105,"line_start":39,"line_end":39,"column_start":1,"column_end":33}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15106,"byte_end":15158,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15159,"byte_end":15182,"line_start":41,"line_end":41,"column_start":1,"column_end":24}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15183,"byte_end":15221,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15222,"byte_end":15267,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15268,"byte_end":15290,"line_start":44,"line_end":44,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15291,"byte_end":15294,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ struct Inner {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15295,"byte_end":15313,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15314,"byte_end":15341,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/     set: AtomicBool,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15342,"byte_end":15366,"line_start":48,"line_end":48,"column_start":1,"column_end":25}},{"value":"/ }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15367,"byte_end":15372,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15373,"byte_end":15376,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ #[derive(Clone)]","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15377,"byte_end":15397,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/ struct Flag(Arc<Inner>);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15398,"byte_end":15426,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15427,"byte_end":15430,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ impl Flag {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15431,"byte_end":15446,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/     pub fn new() -> Self {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15447,"byte_end":15477,"line_start":55,"line_end":55,"column_start":1,"column_end":31}},{"value":"/         Self(Arc::new(Inner {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15478,"byte_end":15511,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/             waker: AtomicWaker::new(),","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15512,"byte_end":15554,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/             set: AtomicBool::new(false),","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15555,"byte_end":15599,"line_start":58,"line_end":58,"column_start":1,"column_end":45}},{"value":"/         }))","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15600,"byte_end":15615,"line_start":59,"line_end":59,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15616,"byte_end":15625,"line_start":60,"line_end":60,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15626,"byte_end":15629,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/     pub fn signal(&self) {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15630,"byte_end":15660,"line_start":62,"line_end":62,"column_start":1,"column_end":31}},{"value":"/         self.0.set.store(true, Relaxed);","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15661,"byte_end":15705,"line_start":63,"line_end":63,"column_start":1,"column_end":45}},{"value":"/         self.0.waker.wake();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15706,"byte_end":15738,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15739,"byte_end":15748,"line_start":65,"line_end":65,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15749,"byte_end":15754,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15755,"byte_end":15758,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ impl Future for Flag {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15759,"byte_end":15785,"line_start":68,"line_end":68,"column_start":1,"column_end":27}},{"value":"/     type Output = ();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15786,"byte_end":15811,"line_start":69,"line_end":69,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15812,"byte_end":15815,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15816,"byte_end":15889,"line_start":71,"line_end":71,"column_start":1,"column_end":74}},{"value":"/         // quick check to avoid registration if already done.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15890,"byte_end":15955,"line_start":72,"line_end":72,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15956,"byte_end":15997,"line_start":73,"line_end":73,"column_start":1,"column_end":42}},{"value":"/             return Poll::Ready(());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":15998,"byte_end":16037,"line_start":74,"line_end":74,"column_start":1,"column_end":40}},{"value":"/         }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16038,"byte_end":16051,"line_start":75,"line_end":75,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16052,"byte_end":16055,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/         self.0.waker.register(cx.waker());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16056,"byte_end":16102,"line_start":77,"line_end":77,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16103,"byte_end":16106,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/         // Need to check condition **after** `register` to avoid a race","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16107,"byte_end":16182,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/         // condition that would result in lost notifications.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16183,"byte_end":16248,"line_start":80,"line_end":80,"column_start":1,"column_end":66}},{"value":"/         if self.0.set.load(Relaxed) {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16249,"byte_end":16290,"line_start":81,"line_end":81,"column_start":1,"column_end":42}},{"value":"/             Poll::Ready(())","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16291,"byte_end":16322,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"/         } else {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16323,"byte_end":16343,"line_start":83,"line_end":83,"column_start":1,"column_end":21}},{"value":"/             Poll::Pending","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16344,"byte_end":16373,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/         }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16374,"byte_end":16387,"line_start":85,"line_end":85,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16388,"byte_end":16397,"line_start":86,"line_end":86,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16398,"byte_end":16403,"line_start":87,"line_end":87,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":16404,"byte_end":16411,"line_start":88,"line_end":88,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21499,"byte_end":21502,"line_start":200,"line_end":200,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicWaker>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `AtomicWaker`.\n","sig":null,"attributes":[{"value":"/ Create an `AtomicWaker`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21453,"byte_end":21481,"line_start":199,"line_end":199,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23788,"byte_end":23796,"line_start":261,"line_end":261,"column_start":12,"column_end":20},"name":"register","qualname":"<AtomicWaker>::register","value":"pub fn register(&Self, &Waker)","parent":null,"children":[],"decl_id":null,"docs":" Registers the waker to be notified on calls to `wake`.","sig":null,"attributes":[{"value":"/ Registers the waker to be notified on calls to `wake`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21750,"byte_end":21808,"line_start":211,"line_end":211,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21813,"byte_end":21816,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The new task will take place of any previous tasks that were registered","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21821,"byte_end":21896,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/ by previous calls to `register`. Any calls to `wake` that happen after","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21901,"byte_end":21975,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ a call to `register` (as defined by the memory ordering rules), will","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21980,"byte_end":22052,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ notify the `register` caller's task and deregister the waker from future","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22057,"byte_end":22133,"line_start":216,"line_end":216,"column_start":5,"column_end":81}},{"value":"/ notifications. Because of this, callers should ensure `register` gets","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22138,"byte_end":22211,"line_start":217,"line_end":217,"column_start":5,"column_end":78}},{"value":"/ invoked with a new `Waker` **each** time they require a wakeup.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22216,"byte_end":22283,"line_start":218,"line_end":218,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22288,"byte_end":22291,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ It is safe to call `register` with multiple other threads concurrently","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22296,"byte_end":22370,"line_start":220,"line_end":220,"column_start":5,"column_end":79}},{"value":"/ calling `wake`. This will result in the `register` caller's current","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22375,"byte_end":22446,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ task being notified once.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22451,"byte_end":22480,"line_start":222,"line_end":222,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22485,"byte_end":22488,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ This function is safe to call concurrently, but this is generally a bad","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22493,"byte_end":22568,"line_start":224,"line_end":224,"column_start":5,"column_end":80}},{"value":"/ idea. Concurrent calls to `register` will attempt to register different","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22573,"byte_end":22648,"line_start":225,"line_end":225,"column_start":5,"column_end":80}},{"value":"/ tasks to be notified. One of the callers will win and have its task set,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22653,"byte_end":22729,"line_start":226,"line_end":226,"column_start":5,"column_end":81}},{"value":"/ but there is no guarantee as to which caller will succeed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22734,"byte_end":22796,"line_start":227,"line_end":227,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22801,"byte_end":22804,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22809,"byte_end":22823,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22828,"byte_end":22831,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Here is how `register` is used when implementing a flag.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22836,"byte_end":22896,"line_start":231,"line_end":231,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22901,"byte_end":22904,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22909,"byte_end":22916,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use futures::future::Future;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22921,"byte_end":22953,"line_start":234,"line_end":234,"column_start":5,"column_end":37}},{"value":"/ use futures::task::{Context, Poll, AtomicWaker};","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":22958,"byte_end":23010,"line_start":235,"line_end":235,"column_start":5,"column_end":57}},{"value":"/ use std::sync::atomic::AtomicBool;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23015,"byte_end":23053,"line_start":236,"line_end":236,"column_start":5,"column_end":43}},{"value":"/ use std::sync::atomic::Ordering::Relaxed;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23058,"byte_end":23103,"line_start":237,"line_end":237,"column_start":5,"column_end":50}},{"value":"/ use std::pin::Pin;","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23108,"byte_end":23130,"line_start":238,"line_end":238,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23135,"byte_end":23138,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ struct Flag {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23143,"byte_end":23160,"line_start":240,"line_end":240,"column_start":5,"column_end":22}},{"value":"/     waker: AtomicWaker,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23165,"byte_end":23192,"line_start":241,"line_end":241,"column_start":5,"column_end":32}},{"value":"/     set: AtomicBool,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23197,"byte_end":23221,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23226,"byte_end":23231,"line_start":243,"line_end":243,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23236,"byte_end":23239,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ impl Future for Flag {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23244,"byte_end":23270,"line_start":245,"line_end":245,"column_start":5,"column_end":31}},{"value":"/     type Output = ();","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23275,"byte_end":23300,"line_start":246,"line_end":246,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23305,"byte_end":23308,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23313,"byte_end":23386,"line_start":248,"line_end":248,"column_start":5,"column_end":78}},{"value":"/         // Register **before** checking `set` to avoid a race condition","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23391,"byte_end":23466,"line_start":249,"line_end":249,"column_start":5,"column_end":80}},{"value":"/         // that would result in lost notifications.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23471,"byte_end":23526,"line_start":250,"line_end":250,"column_start":5,"column_end":60}},{"value":"/         self.waker.register(cx.waker());","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23531,"byte_end":23575,"line_start":251,"line_end":251,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23580,"byte_end":23583,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/         if self.set.load(Relaxed) {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23588,"byte_end":23627,"line_start":253,"line_end":253,"column_start":5,"column_end":44}},{"value":"/             Poll::Ready(())","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23632,"byte_end":23663,"line_start":254,"line_end":254,"column_start":5,"column_end":36}},{"value":"/         } else {","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23668,"byte_end":23688,"line_start":255,"line_end":255,"column_start":5,"column_end":25}},{"value":"/             Poll::Pending","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23693,"byte_end":23722,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/         }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23727,"byte_end":23740,"line_start":257,"line_end":257,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23745,"byte_end":23754,"line_start":258,"line_end":258,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23759,"byte_end":23764,"line_start":259,"line_end":259,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":23769,"byte_end":23776,"line_start":260,"line_end":260,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28464,"byte_end":28468,"line_start":353,"line_end":353,"column_start":12,"column_end":16},"name":"wake","qualname":"<AtomicWaker>::wake","value":"pub fn wake(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Calls `wake` on the last `Waker` passed to `register`.","sig":null,"attributes":[{"value":"/ Calls `wake` on the last `Waker` passed to `register`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28315,"byte_end":28373,"line_start":350,"line_end":350,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28378,"byte_end":28381,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ If `register` has not been called yet, then this does nothing.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28386,"byte_end":28452,"line_start":352,"line_end":352,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28964,"byte_end":28968,"line_start":367,"line_end":367,"column_start":12,"column_end":16},"name":"take","qualname":"<AtomicWaker>::take","value":"pub fn take(&Self) -> Option<Waker>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last `Waker` passed to `register`, so that the user can wake it.","sig":null,"attributes":[{"value":"/ Returns the last `Waker` passed to `register`, so that the user can wake it.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28568,"byte_end":28648,"line_start":359,"line_end":359,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28653,"byte_end":28656,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28661,"byte_end":28664,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Sometimes, just waking the AtomicWaker is not fine grained enough. This allows the user","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28669,"byte_end":28760,"line_start":362,"line_end":362,"column_start":5,"column_end":96}},{"value":"/ to take the waker and then wake it separately, rather than performing both steps in one","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28765,"byte_end":28856,"line_start":363,"line_end":363,"column_start":5,"column_end":96}},{"value":"/ atomic action.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28861,"byte_end":28879,"line_start":364,"line_end":364,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28884,"byte_end":28887,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ If a waker has not been registered, this returns `None`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":28892,"byte_end":28952,"line_start":366,"line_end":366,"column_start":5,"column_end":65}}]},{"kind":"Mod","id":{"krate":0,"index":168},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1404,"byte_end":1413,"line_start":38,"line_end":38,"column_start":9,"column_end":18},"name":"__private","qualname":"::__private","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":169}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2780,"byte_end":2783,"line_start":37,"line_end":37,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3057,"byte_end":3058,"line_start":52,"line_end":52,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3834,"byte_end":3835,"line_start":75,"line_end":75,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":4202,"byte_end":4205,"line_start":92,"line_end":92,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":48}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":4406,"byte_end":4422,"line_start":99,"line_end":99,"column_start":54,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9238,"byte_end":9241,"line_start":118,"line_end":118,"column_start":20,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10393,"byte_end":10396,"line_start":156,"line_end":156,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10670,"byte_end":10671,"line_start":171,"line_end":171,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11443,"byte_end":11444,"line_start":192,"line_end":192,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11832,"byte_end":11835,"line_start":210,"line_end":210,"column_start":49,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":12241,"byte_end":12257,"line_start":226,"line_end":226,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":12667,"byte_end":12670,"line_start":241,"line_end":241,"column_start":59,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21435,"byte_end":21446,"line_start":198,"line_end":198,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21616,"byte_end":21621,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30118,"byte_end":30129,"line_start":399,"line_end":399,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30208,"byte_end":30219,"line_start":405,"line_end":405,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30348,"byte_end":30359,"line_start":411,"line_end":411,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30384,"byte_end":30395,"line_start":412,"line_end":412,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1166,"byte_end":1172,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1254,"byte_end":1260,"line_start":30,"line_end":30,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/lib.rs","byte_start":1355,"byte_end":1359,"line_start":34,"line_end":34,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/mod.rs","byte_start":12863,"byte_end":12873,"line_start":7,"line_end":7,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":132}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2470,"byte_end":2476,"line_start":26,"line_end":26,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":8493},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":2780,"byte_end":2783,"line_start":37,"line_end":37,"column_start":25,"column_end":28},"kind":{"Impl":{"id":0}},"from":{"krate":2,"index":30390},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3057,"byte_end":3058,"line_start":52,"line_end":52,"column_start":30,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":29},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3258,"byte_end":3264,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":8493},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3287,"byte_end":3293,"line_start":57,"line_end":57,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":27},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":3834,"byte_end":3835,"line_start":75,"line_end":75,"column_start":29,"column_end":30},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":37},"to":{"krate":0,"index":32}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":4202,"byte_end":4205,"line_start":92,"line_end":92,"column_start":59,"column_end":62},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/future.rs","byte_start":4406,"byte_end":4422,"line_start":99,"line_end":99,"column_start":54,"column_end":70},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":3801},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":9238,"byte_end":9241,"line_start":118,"line_end":118,"column_start":20,"column_end":23},"kind":{"Impl":{"id":5}},"from":{"krate":2,"index":30390},"to":{"krate":0,"index":68}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10094,"byte_end":10100,"line_start":145,"line_end":145,"column_start":24,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":68},"to":{"krate":0,"index":82}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10393,"byte_end":10396,"line_start":156,"line_end":156,"column_start":25,"column_end":28},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":30390},"to":{"krate":0,"index":82}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10670,"byte_end":10671,"line_start":171,"line_end":171,"column_start":30,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":94},"to":{"krate":0,"index":92}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10869,"byte_end":10875,"line_start":176,"line_end":176,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":68},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":10898,"byte_end":10904,"line_start":176,"line_end":176,"column_start":51,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":92},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11443,"byte_end":11444,"line_start":192,"line_end":192,"column_start":29,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":102},"to":{"krate":0,"index":97}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":11832,"byte_end":11835,"line_start":210,"line_end":210,"column_start":49,"column_end":52},"kind":{"Impl":{"id":9}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":68}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":12241,"byte_end":12257,"line_start":226,"line_end":226,"column_start":44,"column_end":60},"kind":{"Impl":{"id":10}},"from":{"krate":1,"index":3801},"to":{"krate":0,"index":68}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/stream.rs","byte_start":12667,"byte_end":12670,"line_start":241,"line_end":241,"column_start":59,"column_end":62},"kind":{"Impl":{"id":11}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":82}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21435,"byte_end":21446,"line_start":198,"line_end":198,"column_start":6,"column_end":17},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21580,"byte_end":21584,"line_start":202,"line_end":202,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1983},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":21616,"byte_end":21621,"line_start":203,"line_end":203,"column_start":29,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":2,"index":8669},"to":{"krate":0,"index":150}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30118,"byte_end":30129,"line_start":399,"line_end":399,"column_start":18,"column_end":29},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30208,"byte_end":30219,"line_start":405,"line_end":405,"column_start":21,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30348,"byte_end":30359,"line_start":411,"line_end":411,"column_start":22,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":1971}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-core-0.3.8/src/task/__internal/atomic_waker.rs","byte_start":30384,"byte_end":30395,"line_start":412,"line_end":412,"column_start":22,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":142},"to":{"krate":2,"index":1983}}]}