{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8","program":"/home/tommady/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","futures_io","--edition=2018","/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"std\"","-C","metadata=ee9861e226061e11","-C","extra-filename=-ee9861e226061e11","--out-dir","/home/tommady/code/homepage/server/target/rls/debug/deps","-L","dependency=/home/tommady/code/homepage/server/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/tommady/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/tommady/code/homepage/server/target/rls/debug/deps/libfutures_io-ee9861e226061e11.rmeta"},"prelude":{"crate_id":{"name":"futures_io","disambiguator":[8049016523296521142,15106699211274674486]},"crate_root":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src","external_crates":[{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}}],"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":0,"byte_end":22490,"line_start":1,"line_end":581,"column_start":1,"column_end":25}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":15119,"byte_end":15120,"line_start":334,"line_end":334,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":0,"byte_end":22490,"line_start":1,"line_end":581,"column_start":1,"column_end":25},"name":"","qualname":"::","value":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":73}],"decl_id":null,"docs":" Asynchronous I/O","sig":null,"attributes":[{"value":"/ Asynchronous I/O","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":0,"byte_end":20,"line_start":1,"line_end":1,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":21,"byte_end":24,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate contains the `AsyncRead`, `AsyncWrite`, `AsyncSeek`, and","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":25,"byte_end":96,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ `AsyncBufRead` traits, the asynchronous analogs to","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":97,"byte_end":151,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/ `std::io::{Read, Write, Seek, BufRead}`. The primary difference is","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":152,"byte_end":222,"line_start":5,"line_end":5,"column_start":1,"column_end":71}},{"value":"/ that these traits integrate with the asynchronous task system.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":223,"byte_end":289,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":290,"byte_end":293,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ All items of this library are only available when the `std` feature of this","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":294,"byte_end":373,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ library is activated, and it is activated by default.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":374,"byte_end":431,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"warn(missing_docs, missing_debug_implementations, rust_2018_idioms,\n       unreachable_pub)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":570,"byte_end":658,"line_start":15,"line_end":15,"column_start":1,"column_end":89}},{"value":"warn(clippy :: all)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":826,"byte_end":847,"line_start":18,"line_end":18,"column_start":1,"column_end":22}},{"value":"allow(clippy :: mem_replace_with_default, clippy ::\n        match_like_matches_macro)","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":1052,"byte_end":1129,"line_start":23,"line_end":23,"column_start":1,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":17},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2709,"byte_end":2718,"line_start":65,"line_end":65,"column_start":15,"column_end":24},"name":"AsyncRead","qualname":"::if_std::AsyncRead","value":"AsyncRead","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"decl_id":null,"docs":" Read bytes asynchronously.","sig":null,"attributes":[{"value":"/ Read bytes asynchronously.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2317,"byte_end":2347,"line_start":58,"line_end":58,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2352,"byte_end":2355,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Read` trait, but integrates","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2360,"byte_end":2432,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ with the asynchronous task system. In particular, the `poll_read`","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2437,"byte_end":2506,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/ method, unlike `Read::read`, will automatically queue the current task","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2511,"byte_end":2585,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2590,"byte_end":2666,"line_start":63,"line_end":63,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":2671,"byte_end":2694,"line_start":64,"line_end":64,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4278,"byte_end":4287,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"poll_read","qualname":"::if_std::AsyncRead::poll_read","value":"pub fn poll_read(Pin<&mut Self>, &mut Context, &mut [u8])\n-> Poll<Result<usize>>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Attempt to read from the `AsyncRead` into `buf`.","sig":null,"attributes":[{"value":"/ Attempt to read from the `AsyncRead` into `buf`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3545,"byte_end":3597,"line_start":87,"line_end":87,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3606,"byte_end":3609,"line_start":88,"line_end":88,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_read))`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3618,"byte_end":3676,"line_start":89,"line_end":89,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3685,"byte_end":3688,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3697,"byte_end":3756,"line_start":91,"line_end":91,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3765,"byte_end":3823,"line_start":92,"line_end":92,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3832,"byte_end":3913,"line_start":93,"line_end":93,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3922,"byte_end":3948,"line_start":94,"line_end":94,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3957,"byte_end":3960,"line_start":95,"line_end":95,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3969,"byte_end":3989,"line_start":96,"line_end":96,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":3998,"byte_end":4001,"line_start":97,"line_end":97,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4010,"byte_end":4073,"line_start":98,"line_end":98,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4082,"byte_end":4148,"line_start":99,"line_end":99,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4157,"byte_end":4215,"line_start":100,"line_end":100,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4224,"byte_end":4266,"line_start":101,"line_end":101,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5544,"byte_end":5562,"line_start":127,"line_end":127,"column_start":12,"column_end":30},"name":"poll_read_vectored","qualname":"::if_std::AsyncRead::poll_read_vectored","value":"pub fn poll_read_vectored(Pin<&mut Self>, &mut Context, &mut [IoSliceMut])\n-> Poll<Result<usize>>","parent":{"krate":0,"index":17},"children":[],"decl_id":null,"docs":" Attempt to read from the `AsyncRead` into `bufs` using vectored\n IO operations.","sig":null,"attributes":[{"value":"/ Attempt to read from the `AsyncRead` into `bufs` using vectored","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4393,"byte_end":4460,"line_start":105,"line_end":105,"column_start":9,"column_end":76}},{"value":"/ IO operations.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4469,"byte_end":4487,"line_start":106,"line_end":106,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4496,"byte_end":4499,"line_start":107,"line_end":107,"column_start":9,"column_end":12}},{"value":"/ This method is similar to `poll_read`, but allows data to be read","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4508,"byte_end":4577,"line_start":108,"line_end":108,"column_start":9,"column_end":78}},{"value":"/ into multiple buffers using a single operation.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4586,"byte_end":4637,"line_start":109,"line_end":109,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4646,"byte_end":4649,"line_start":110,"line_end":110,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_read))`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4658,"byte_end":4716,"line_start":111,"line_end":111,"column_start":9,"column_end":67}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4725,"byte_end":4728,"line_start":112,"line_end":112,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4737,"byte_end":4796,"line_start":113,"line_end":113,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4805,"byte_end":4863,"line_start":114,"line_end":114,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4872,"byte_end":4953,"line_start":115,"line_end":115,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4962,"byte_end":4988,"line_start":116,"line_end":116,"column_start":9,"column_end":35}},{"value":"/ By default, this method delegates to using `poll_read` on the first","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":4997,"byte_end":5068,"line_start":117,"line_end":117,"column_start":9,"column_end":80}},{"value":"/ nonempty buffer in `bufs`, or an empty one if none exists. Objects which","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5077,"byte_end":5153,"line_start":118,"line_end":118,"column_start":9,"column_end":85}},{"value":"/ support vectored IO should override this method.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5162,"byte_end":5214,"line_start":119,"line_end":119,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5223,"byte_end":5226,"line_start":120,"line_end":120,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5235,"byte_end":5255,"line_start":121,"line_end":121,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5264,"byte_end":5267,"line_start":122,"line_end":122,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5276,"byte_end":5339,"line_start":123,"line_end":123,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5348,"byte_end":5414,"line_start":124,"line_end":124,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5423,"byte_end":5481,"line_start":125,"line_end":125,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5490,"byte_end":5532,"line_start":126,"line_end":126,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":20},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6292,"byte_end":6302,"line_start":147,"line_end":147,"column_start":15,"column_end":25},"name":"AsyncWrite","qualname":"::if_std::AsyncWrite","value":"AsyncWrite","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"decl_id":null,"docs":" Write bytes asynchronously.","sig":null,"attributes":[{"value":"/ Write bytes asynchronously.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5888,"byte_end":5919,"line_start":140,"line_end":140,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5924,"byte_end":5927,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Write` trait, but integrates","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":5932,"byte_end":6005,"line_start":142,"line_end":142,"column_start":5,"column_end":78}},{"value":"/ with the asynchronous task system. In particular, the `poll_write`","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6010,"byte_end":6080,"line_start":143,"line_end":143,"column_start":5,"column_end":75}},{"value":"/ method, unlike `Write::write`, will automatically queue the current task","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6085,"byte_end":6161,"line_start":144,"line_end":144,"column_start":5,"column_end":81}},{"value":"/ for wakeup and return if the writer cannot take more data, rather than blocking","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6166,"byte_end":6249,"line_start":145,"line_end":145,"column_start":5,"column_end":88}},{"value":"/ the calling thread.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6254,"byte_end":6277,"line_start":146,"line_end":146,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":21},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7236,"byte_end":7246,"line_start":166,"line_end":166,"column_start":12,"column_end":22},"name":"poll_write","qualname":"::if_std::AsyncWrite::poll_write","value":"pub fn poll_write(Pin<&mut Self>, &mut Context, &[u8]) -> Poll<Result<usize>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to write bytes from `buf` into the object.","sig":null,"attributes":[{"value":"/ Attempt to write bytes from `buf` into the object.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6313,"byte_end":6367,"line_start":148,"line_end":148,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6376,"byte_end":6379,"line_start":149,"line_end":149,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6388,"byte_end":6449,"line_start":150,"line_end":150,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6458,"byte_end":6461,"line_start":151,"line_end":151,"column_start":9,"column_end":12}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6470,"byte_end":6532,"line_start":152,"line_end":152,"column_start":9,"column_end":71}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6541,"byte_end":6599,"line_start":153,"line_end":153,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6608,"byte_end":6689,"line_start":154,"line_end":154,"column_start":9,"column_end":90}},{"value":"/ writable or is closed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6698,"byte_end":6724,"line_start":155,"line_end":155,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6733,"byte_end":6736,"line_start":156,"line_end":156,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6745,"byte_end":6765,"line_start":157,"line_end":157,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6774,"byte_end":6777,"line_start":158,"line_end":158,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6786,"byte_end":6849,"line_start":159,"line_end":159,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6858,"byte_end":6924,"line_start":160,"line_end":160,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":6933,"byte_end":6991,"line_start":161,"line_end":161,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7000,"byte_end":7042,"line_start":162,"line_end":162,"column_start":9,"column_end":51}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7051,"byte_end":7054,"line_start":163,"line_end":163,"column_start":9,"column_end":12}},{"value":"/ `poll_write` must try to make progress by flushing the underlying object if","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7063,"byte_end":7142,"line_start":164,"line_end":164,"column_start":9,"column_end":88}},{"value":"/ that is the only way the underlying object can become writable again.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7151,"byte_end":7224,"line_start":165,"line_end":165,"column_start":9,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8524,"byte_end":8543,"line_start":192,"line_end":192,"column_start":12,"column_end":31},"name":"poll_write_vectored","qualname":"::if_std::AsyncWrite::poll_write_vectored","value":"pub fn poll_write_vectored(Pin<&mut Self>, &mut Context, &[IoSlice])\n-> Poll<Result<usize>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to write bytes from `bufs` into the object using vectored\n IO operations.","sig":null,"attributes":[{"value":"/ Attempt to write bytes from `bufs` into the object using vectored","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7348,"byte_end":7417,"line_start":169,"line_end":169,"column_start":9,"column_end":78}},{"value":"/ IO operations.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7426,"byte_end":7444,"line_start":170,"line_end":170,"column_start":9,"column_end":27}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7453,"byte_end":7456,"line_start":171,"line_end":171,"column_start":9,"column_end":12}},{"value":"/ This method is similar to `poll_write`, but allows data from multiple buffers to be written","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7465,"byte_end":7560,"line_start":172,"line_end":172,"column_start":9,"column_end":104}},{"value":"/ using a single operation.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7569,"byte_end":7598,"line_start":173,"line_end":173,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7607,"byte_end":7610,"line_start":174,"line_end":174,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(num_bytes_written))`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7619,"byte_end":7680,"line_start":175,"line_end":175,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7689,"byte_end":7692,"line_start":176,"line_end":176,"column_start":9,"column_end":12}},{"value":"/ If the object is not ready for writing, the method returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7701,"byte_end":7763,"line_start":177,"line_end":177,"column_start":9,"column_end":71}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7772,"byte_end":7830,"line_start":178,"line_end":178,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7839,"byte_end":7920,"line_start":179,"line_end":179,"column_start":9,"column_end":90}},{"value":"/ writable or is closed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7929,"byte_end":7955,"line_start":180,"line_end":180,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7964,"byte_end":7967,"line_start":181,"line_end":181,"column_start":9,"column_end":12}},{"value":"/ By default, this method delegates to using `poll_write` on the first","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":7976,"byte_end":8048,"line_start":182,"line_end":182,"column_start":9,"column_end":81}},{"value":"/ nonempty buffer in `bufs`, or an empty one if none exists. Objects which","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8057,"byte_end":8133,"line_start":183,"line_end":183,"column_start":9,"column_end":85}},{"value":"/ support vectored IO should override this method.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8142,"byte_end":8194,"line_start":184,"line_end":184,"column_start":9,"column_end":61}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8203,"byte_end":8206,"line_start":185,"line_end":185,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8215,"byte_end":8235,"line_start":186,"line_end":186,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8244,"byte_end":8247,"line_start":187,"line_end":187,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8256,"byte_end":8319,"line_start":188,"line_end":188,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8328,"byte_end":8394,"line_start":189,"line_end":189,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8403,"byte_end":8461,"line_start":190,"line_end":190,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8470,"byte_end":8512,"line_start":191,"line_end":191,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9731,"byte_end":9741,"line_start":222,"line_end":222,"column_start":12,"column_end":22},"name":"poll_flush","qualname":"::if_std::AsyncWrite::poll_flush","value":"pub fn poll_flush(Pin<&mut Self>, &mut Context) -> Poll<Result<()>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to flush the object, ensuring that any buffered data reach\n their destination.","sig":null,"attributes":[{"value":"/ Attempt to flush the object, ensuring that any buffered data reach","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8858,"byte_end":8928,"line_start":204,"line_end":204,"column_start":9,"column_end":79}},{"value":"/ their destination.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8937,"byte_end":8959,"line_start":205,"line_end":205,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8968,"byte_end":8971,"line_start":206,"line_end":206,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":8980,"byte_end":9026,"line_start":207,"line_end":207,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9035,"byte_end":9038,"line_start":208,"line_end":208,"column_start":9,"column_end":12}},{"value":"/ If flushing cannot immediately complete, this method returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9047,"byte_end":9111,"line_start":209,"line_end":209,"column_start":9,"column_end":73}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9120,"byte_end":9178,"line_start":210,"line_end":210,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object can make","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9187,"byte_end":9269,"line_start":211,"line_end":211,"column_start":9,"column_end":91}},{"value":"/ progress towards flushing.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9278,"byte_end":9308,"line_start":212,"line_end":212,"column_start":9,"column_end":39}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9317,"byte_end":9320,"line_start":213,"line_end":213,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9329,"byte_end":9349,"line_start":214,"line_end":214,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9358,"byte_end":9361,"line_start":215,"line_end":215,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9370,"byte_end":9433,"line_start":216,"line_end":216,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9442,"byte_end":9508,"line_start":217,"line_end":217,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9517,"byte_end":9575,"line_start":218,"line_end":218,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9584,"byte_end":9626,"line_start":219,"line_end":219,"column_start":9,"column_end":51}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9635,"byte_end":9638,"line_start":220,"line_end":220,"column_start":9,"column_end":12}},{"value":"/ It only makes sense to do anything here if you actually buffer data.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9647,"byte_end":9719,"line_start":221,"line_end":221,"column_start":9,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10527,"byte_end":10537,"line_start":239,"line_end":239,"column_start":12,"column_end":22},"name":"poll_close","qualname":"::if_std::AsyncWrite::poll_close","value":"pub fn poll_close(Pin<&mut Self>, &mut Context) -> Poll<Result<()>>","parent":{"krate":0,"index":20},"children":[],"decl_id":null,"docs":" Attempt to close the object.","sig":null,"attributes":[{"value":"/ Attempt to close the object.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9816,"byte_end":9848,"line_start":224,"line_end":224,"column_start":9,"column_end":41}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9857,"byte_end":9860,"line_start":225,"line_end":225,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(()))`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9869,"byte_end":9915,"line_start":226,"line_end":226,"column_start":9,"column_end":55}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9924,"byte_end":9927,"line_start":227,"line_end":227,"column_start":9,"column_end":12}},{"value":"/ If closing cannot immediately complete, this function returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":9936,"byte_end":10001,"line_start":228,"line_end":228,"column_start":9,"column_end":74}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10010,"byte_end":10068,"line_start":229,"line_end":229,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object can make","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10077,"byte_end":10159,"line_start":230,"line_end":230,"column_start":9,"column_end":91}},{"value":"/ progress towards closing.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10168,"byte_end":10197,"line_start":231,"line_end":231,"column_start":9,"column_end":38}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10206,"byte_end":10209,"line_start":232,"line_end":232,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10218,"byte_end":10238,"line_start":233,"line_end":233,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10247,"byte_end":10250,"line_start":234,"line_end":234,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10259,"byte_end":10322,"line_start":235,"line_end":235,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10331,"byte_end":10397,"line_start":236,"line_end":236,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10406,"byte_end":10464,"line_start":237,"line_end":237,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10473,"byte_end":10515,"line_start":238,"line_end":238,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11006,"byte_end":11015,"line_start":249,"line_end":249,"column_start":15,"column_end":24},"name":"AsyncSeek","qualname":"::if_std::AsyncSeek","value":"AsyncSeek","parent":null,"children":[{"krate":0,"index":26}],"decl_id":null,"docs":" Seek bytes asynchronously.","sig":null,"attributes":[{"value":"/ Seek bytes asynchronously.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10614,"byte_end":10644,"line_start":242,"line_end":242,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10649,"byte_end":10652,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::Seek` trait, but integrates","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10657,"byte_end":10729,"line_start":244,"line_end":244,"column_start":5,"column_end":77}},{"value":"/ with the asynchronous task system. In particular, the `poll_seek`","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10734,"byte_end":10803,"line_start":245,"line_end":245,"column_start":5,"column_end":74}},{"value":"/ method, unlike `Seek::seek`, will automatically queue the current task","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10808,"byte_end":10882,"line_start":246,"line_end":246,"column_start":5,"column_end":79}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10887,"byte_end":10963,"line_start":247,"line_end":247,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":10968,"byte_end":10991,"line_start":248,"line_end":248,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11870,"byte_end":11879,"line_start":269,"line_end":269,"column_start":12,"column_end":21},"name":"poll_seek","qualname":"::if_std::AsyncSeek::poll_seek","value":"pub fn poll_seek(Pin<&mut Self>, &mut Context, SeekFrom) -> Poll<Result<u64>>","parent":{"krate":0,"index":25},"children":[],"decl_id":null,"docs":" Attempt to seek to an offset, in bytes, in a stream.","sig":null,"attributes":[{"value":"/ Attempt to seek to an offset, in bytes, in a stream.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11026,"byte_end":11082,"line_start":250,"line_end":250,"column_start":9,"column_end":65}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11091,"byte_end":11094,"line_start":251,"line_end":251,"column_start":9,"column_end":12}},{"value":"/ A seek beyond the end of a stream is allowed, but behavior is defined","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11103,"byte_end":11176,"line_start":252,"line_end":252,"column_start":9,"column_end":82}},{"value":"/ by the implementation.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11185,"byte_end":11211,"line_start":253,"line_end":253,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11220,"byte_end":11223,"line_start":254,"line_end":254,"column_start":9,"column_end":12}},{"value":"/ If the seek operation completed successfully,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11232,"byte_end":11281,"line_start":255,"line_end":255,"column_start":9,"column_end":58}},{"value":"/ this method returns the new position from the start of the stream.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11290,"byte_end":11360,"line_start":256,"line_end":256,"column_start":9,"column_end":79}},{"value":"/ That position can be used later with [`SeekFrom::Start`].","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11369,"byte_end":11430,"line_start":257,"line_end":257,"column_start":9,"column_end":70}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11439,"byte_end":11442,"line_start":258,"line_end":258,"column_start":9,"column_end":12}},{"value":"/ # Errors","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11451,"byte_end":11463,"line_start":259,"line_end":259,"column_start":9,"column_end":21}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11472,"byte_end":11475,"line_start":260,"line_end":260,"column_start":9,"column_end":12}},{"value":"/ Seeking to a negative offset is considered an error.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11484,"byte_end":11540,"line_start":261,"line_end":261,"column_start":9,"column_end":65}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11549,"byte_end":11552,"line_start":262,"line_end":262,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11561,"byte_end":11581,"line_start":263,"line_end":263,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11590,"byte_end":11593,"line_start":264,"line_end":264,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11602,"byte_end":11665,"line_start":265,"line_end":265,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11674,"byte_end":11740,"line_start":266,"line_end":266,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11749,"byte_end":11807,"line_start":267,"line_end":267,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11816,"byte_end":11858,"line_start":268,"line_end":268,"column_start":9,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12390,"byte_end":12402,"line_start":280,"line_end":280,"column_start":15,"column_end":27},"name":"AsyncBufRead","qualname":"::if_std::AsyncBufRead","value":"AsyncBufRead: AsyncRead","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":" Read bytes asynchronously.","sig":null,"attributes":[{"value":"/ Read bytes asynchronously.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":11984,"byte_end":12014,"line_start":273,"line_end":273,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12019,"byte_end":12022,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ This trait is analogous to the `std::io::BufRead` trait, but integrates","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12027,"byte_end":12102,"line_start":275,"line_end":275,"column_start":5,"column_end":80}},{"value":"/ with the asynchronous task system. In particular, the `poll_fill_buf`","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12107,"byte_end":12180,"line_start":276,"line_end":276,"column_start":5,"column_end":78}},{"value":"/ method, unlike `BufRead::fill_buf`, will automatically queue the current task","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12185,"byte_end":12266,"line_start":277,"line_end":277,"column_start":5,"column_end":86}},{"value":"/ for wakeup and return if data is not yet available, rather than blocking","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12271,"byte_end":12347,"line_start":278,"line_end":278,"column_start":5,"column_end":81}},{"value":"/ the calling thread.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12352,"byte_end":12375,"line_start":279,"line_end":279,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13905,"byte_end":13918,"line_start":309,"line_end":309,"column_start":12,"column_end":25},"name":"poll_fill_buf","qualname":"::if_std::AsyncBufRead::poll_fill_buf","value":"pub fn poll_fill_buf(Pin<&mut Self>, &mut Context) -> Poll<Result<&[u8]>>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Attempt to return the contents of the internal buffer, filling it with more data\n from the inner reader if it is empty.","sig":null,"attributes":[{"value":"/ Attempt to return the contents of the internal buffer, filling it with more data","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12424,"byte_end":12508,"line_start":281,"line_end":281,"column_start":9,"column_end":93}},{"value":"/ from the inner reader if it is empty.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12517,"byte_end":12558,"line_start":282,"line_end":282,"column_start":9,"column_end":50}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12567,"byte_end":12570,"line_start":283,"line_end":283,"column_start":9,"column_end":12}},{"value":"/ On success, returns `Poll::Ready(Ok(buf))`.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12579,"byte_end":12626,"line_start":284,"line_end":284,"column_start":9,"column_end":56}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12635,"byte_end":12638,"line_start":285,"line_end":285,"column_start":9,"column_end":12}},{"value":"/ If no data is available for reading, the method returns","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12647,"byte_end":12706,"line_start":286,"line_end":286,"column_start":9,"column_end":68}},{"value":"/ `Poll::Pending` and arranges for the current task (via","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12715,"byte_end":12773,"line_start":287,"line_end":287,"column_start":9,"column_end":67}},{"value":"/ `cx.waker().wake_by_ref()`) to receive a notification when the object becomes","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12782,"byte_end":12863,"line_start":288,"line_end":288,"column_start":9,"column_end":90}},{"value":"/ readable or is closed.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12872,"byte_end":12898,"line_start":289,"line_end":289,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12907,"byte_end":12910,"line_start":290,"line_end":290,"column_start":9,"column_end":12}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12919,"byte_end":12990,"line_start":291,"line_end":291,"column_start":9,"column_end":80}},{"value":"/ [`consume`] method to function properly. When calling this","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12999,"byte_end":13061,"line_start":292,"line_end":292,"column_start":9,"column_end":71}},{"value":"/ method, none of the contents will be \"read\" in the sense that later","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13070,"byte_end":13141,"line_start":293,"line_end":293,"column_start":9,"column_end":80}},{"value":"/ calling [`poll_read`] may return the same contents. As such, [`consume`] must","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13150,"byte_end":13231,"line_start":294,"line_end":294,"column_start":9,"column_end":90}},{"value":"/ be called with the number of bytes that are consumed from this buffer to","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13240,"byte_end":13316,"line_start":295,"line_end":295,"column_start":9,"column_end":85}},{"value":"/ ensure that the bytes are never returned twice.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13325,"byte_end":13376,"line_start":296,"line_end":296,"column_start":9,"column_end":60}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13385,"byte_end":13388,"line_start":297,"line_end":297,"column_start":9,"column_end":12}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13397,"byte_end":13436,"line_start":298,"line_end":298,"column_start":9,"column_end":48}},{"value":"/ [`consume`]: AsyncBufRead::consume","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13445,"byte_end":13483,"line_start":299,"line_end":299,"column_start":9,"column_end":47}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13492,"byte_end":13495,"line_start":300,"line_end":300,"column_start":9,"column_end":12}},{"value":"/ An empty buffer returned indicates that the stream has reached EOF.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13504,"byte_end":13575,"line_start":301,"line_end":301,"column_start":9,"column_end":80}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13584,"byte_end":13587,"line_start":302,"line_end":302,"column_start":9,"column_end":12}},{"value":"/ # Implementation","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13596,"byte_end":13616,"line_start":303,"line_end":303,"column_start":9,"column_end":29}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13625,"byte_end":13628,"line_start":304,"line_end":304,"column_start":9,"column_end":12}},{"value":"/ This function may not return errors of kind `WouldBlock` or","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13637,"byte_end":13700,"line_start":305,"line_end":305,"column_start":9,"column_end":72}},{"value":"/ `Interrupted`.  Implementations must convert `WouldBlock` into","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13709,"byte_end":13775,"line_start":306,"line_end":306,"column_start":9,"column_end":75}},{"value":"/ `Poll::Pending` and either internally retry or convert","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13784,"byte_end":13842,"line_start":307,"line_end":307,"column_start":9,"column_end":67}},{"value":"/ `Interrupted` into another error kind.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":13851,"byte_end":13893,"line_start":308,"line_end":308,"column_start":9,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14893,"byte_end":14900,"line_start":327,"line_end":327,"column_start":12,"column_end":19},"name":"consume","qualname":"::if_std::AsyncBufRead::consume","value":"pub fn consume(Pin<&mut Self>, usize)","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Tells this buffer that `amt` bytes have been consumed from the buffer,\n so they should no longer be returned in calls to [`poll_read`].","sig":null,"attributes":[{"value":"/ Tells this buffer that `amt` bytes have been consumed from the buffer,","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14008,"byte_end":14082,"line_start":312,"line_end":312,"column_start":9,"column_end":83}},{"value":"/ so they should no longer be returned in calls to [`poll_read`].","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14091,"byte_end":14158,"line_start":313,"line_end":313,"column_start":9,"column_end":76}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14167,"byte_end":14170,"line_start":314,"line_end":314,"column_start":9,"column_end":12}},{"value":"/ This function is a lower-level call. It needs to be paired with the","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14179,"byte_end":14250,"line_start":315,"line_end":315,"column_start":9,"column_end":80}},{"value":"/ [`poll_fill_buf`] method to function properly. This function does","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14259,"byte_end":14328,"line_start":316,"line_end":316,"column_start":9,"column_end":78}},{"value":"/ not perform any I/O, it simply informs this object that some amount of","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14337,"byte_end":14411,"line_start":317,"line_end":317,"column_start":9,"column_end":83}},{"value":"/ its buffer, returned from [`poll_fill_buf`], has been consumed and should","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14420,"byte_end":14497,"line_start":318,"line_end":318,"column_start":9,"column_end":86}},{"value":"/ no longer be returned. As such, this function may do odd things if","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14506,"byte_end":14576,"line_start":319,"line_end":319,"column_start":9,"column_end":79}},{"value":"/ [`poll_fill_buf`] isn't called before calling it.","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14585,"byte_end":14638,"line_start":320,"line_end":320,"column_start":9,"column_end":62}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14647,"byte_end":14650,"line_start":321,"line_end":321,"column_start":9,"column_end":12}},{"value":"/ The `amt` must be `<=` the number of bytes in the buffer returned by","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14659,"byte_end":14731,"line_start":322,"line_end":322,"column_start":9,"column_end":81}},{"value":"/ [`poll_fill_buf`].","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14740,"byte_end":14762,"line_start":323,"line_end":323,"column_start":9,"column_end":31}},{"value":"/","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14771,"byte_end":14774,"line_start":324,"line_end":324,"column_start":9,"column_end":12}},{"value":"/ [`poll_read`]: AsyncRead::poll_read","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14783,"byte_end":14822,"line_start":325,"line_end":325,"column_start":9,"column_end":48}},{"value":"/ [`poll_fill_buf`]: AsyncBufRead::poll_fill_buf","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":14831,"byte_end":14881,"line_start":326,"line_end":326,"column_start":9,"column_end":59}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":15686,"byte_end":15689,"line_start":351,"line_end":351,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":15856,"byte_end":15859,"line_start":359,"line_end":359,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":18202,"byte_end":18205,"line_start":431,"line_end":431,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":18377,"byte_end":18380,"line_start":439,"line_end":439,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":20052,"byte_end":20055,"line_start":489,"line_end":489,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":20444,"byte_end":20447,"line_start":503,"line_end":503,"column_start":55,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":20614,"byte_end":20617,"line_start":511,"line_end":511,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":21359,"byte_end":21362,"line_start":537,"line_end":537,"column_start":61,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":21546,"byte_end":21549,"line_start":545,"line_end":545,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":12404,"byte_end":12413,"line_start":280,"line_end":280,"column_start":29,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":17},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":15686,"byte_end":15689,"line_start":351,"line_end":351,"column_start":55,"column_end":58},"kind":{"Impl":{"id":0}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":15856,"byte_end":15859,"line_start":359,"line_end":359,"column_start":27,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":2,"index":30390},"to":{"krate":0,"index":17}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":18202,"byte_end":18205,"line_start":431,"line_end":431,"column_start":57,"column_end":60},"kind":{"Impl":{"id":2}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":18377,"byte_end":18380,"line_start":439,"line_end":439,"column_start":28,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":2,"index":30390},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":20052,"byte_end":20055,"line_start":489,"line_end":489,"column_start":25,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":5,"index":4366},"to":{"krate":0,"index":20}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":20444,"byte_end":20447,"line_start":503,"line_end":503,"column_start":55,"column_end":58},"kind":{"Impl":{"id":5}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":20614,"byte_end":20617,"line_start":511,"line_end":511,"column_start":27,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":2,"index":30390},"to":{"krate":0,"index":25}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":21359,"byte_end":21362,"line_start":537,"line_end":537,"column_start":61,"column_end":64},"kind":{"Impl":{"id":7}},"from":{"krate":5,"index":84},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/tommady/.cargo/registry/src/github.com-1ecc6299db9ec823/futures-io-0.3.8/src/lib.rs","byte_start":21546,"byte_end":21549,"line_start":545,"line_end":545,"column_start":30,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":2,"index":30390},"to":{"krate":0,"index":27}}]}